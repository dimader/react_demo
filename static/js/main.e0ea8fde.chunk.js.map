{"version":3,"sources":["components/demos/HookStateDemo.tsx","components/demos/UseStateDemo.tsx","components/demos/UseEffectDemo.tsx","components/task/TaskExample.tsx","components/task/input-util.ts","components/task/TaskExampleUncontrolled.tsx","components/Overview.tsx","components/demos/ExampleConverter.tsx","components/demos/State.tsx","components/demos/Effect.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HookOverviewLinks","to","Counter","useState","count","setCount","type","onClick","value","CounterMultiple","CounterChooser","content","i","push","AntiCounter","AntiCounterChooser","kind","setKind","UseStateOverviewLinks","CounterPrevStateTest","console","log","prev","StateChangeTest","first","second","data","setData","newData","LazyStateTest","show","setShow","LazyState","name","age","map","each","UseEffectOverviewLinks","UseEffectLifeCycle","secondCount","setSecondCount","useEffect","UseEffectDependencies","UseEffectDependenciesInner","id","props","text","setText","createTask","desc","prio","description","dueDate","Date","done","Navigation","Content","path","TasksTable","tableData","onDelete","onDone","TaskCreate","onSave","Fragment","eachTask","TaskRow","task","onDeleteClick","onDoneClick","formatDateToString","String","history","useHistory","info","setInfo","hasError","setHasError","handleInputChange","event","target","checked","setInputChange","React","validate","currentData","message","now","setHours","onSubmit","preventDefault","undefined","htmlFor","placeholder","onChange","e","parseInt","disabled","date","dd","getDate","padStart","mm","getMonth","getFullYear","descElementRef","useRef","prioElementRef","dateElementRef","doneElementRef","current","ref","Overview","components","eachComponent","component","Links","decs","nextId","setNextId","filter","copy","index","findIndex","element","setName","exchange","setExchange","setValue","result","setResult","className","newValue","parseFloat","toString","convert","document","title","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8PAsBA,SAASA,IACL,OAAQ,mCACJ,8BAAK,gCAED,sBAAI,cAAC,IAAD,CAAMC,GAAG,wBAAT,iCACJ,sBAAI,cAAC,IAAD,CAAMA,GAAG,6BAAT,wCACJ,sBAAI,cAAC,IAAD,CAAMA,GAAG,4BAAT,wCACJ,sBAAI,cAAC,IAAD,CAAMA,GAAG,kCAAT,uDAMhB,SAASC,IACL,MAA4BC,mBAAS,GAArC,mBAAQC,EAAR,KAAeC,EAAf,KACA,OACI,eAAC,WAAD,WAEI,4CAAYD,KAEZ,uBAAOE,KAAK,SAASC,QAAS,kBAAMF,EAASD,EAAQ,IAAII,MAAM,QAC/D,uBAAOF,KAAK,SAASC,QAAS,kBAAMF,EAASD,EAAQ,IAAII,MAAM,WAO3E,SAASC,IACL,OAAQ,qCACJ,cAACP,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,OAKR,SAASQ,IAIL,IAHA,MAA4BP,mBAAS,GAArC,mBAAQC,EAAR,KAAeC,EAAf,KAEIM,EAAU,GACLC,EAAE,EAAGA,EAAIR,EAAOQ,IACrBD,EAAQE,KAAK,cAACX,EAAD,KAGjB,OACI,eAAC,WAAD,WAEI,yCAAYE,KAEZ,uBAAOE,KAAK,SAASC,QAAS,kBAAMF,EAASD,EAAQ,IAAII,MAAM,cAC/D,uBAAOF,KAAK,SAASC,QAAS,kBAAMF,EAASD,EAAQ,IAAII,MAAM,cAE9DG,KAOb,SAASG,IACL,MAA4BX,mBAAS,KAArC,mBAAQC,EAAR,KAAeC,EAAf,KACA,OACI,eAAC,WAAD,WAEI,4CAAYD,KAEZ,uBAAOE,KAAK,SAASC,QAAS,kBAAMF,EAASD,EAAQ,MAAMI,MAAM,QACjE,uBAAOF,KAAK,SAASC,QAAS,kBAAMF,EAASD,EAAQ,MAAMI,MAAM,WAO7E,SAASO,IAKL,IAJA,MAA4BZ,mBAAS,GAArC,mBAAQC,EAAR,KAAeC,EAAf,KACA,EAA0BF,oBAAS,GAAnC,mBAAQa,EAAR,KAAcC,EAAd,KAEIN,EAAU,GACLC,EAAE,EAAGA,EAAIR,EAAOQ,IACjBI,EACAL,EAAQE,KAAK,cAACC,EAAD,KAEbH,EAAQE,KAAK,cAACX,EAAD,KAIrB,OACI,eAAC,WAAD,WAEI,yCAAYE,EAAZ,yBAAyCY,EAAO,SAAW,SAA3D,OAEA,uBAAOV,KAAK,SAASC,QAAS,kBAAMF,EAASD,EAAQ,IAAII,MAAM,QAC/D,uBAAOF,KAAK,SAASC,QAAS,kBAAMF,EAASD,EAAQ,IAAII,MAAM,QAE/D,uBAAOF,KAAK,SAASC,QAAS,kBAAMU,GAASD,IAAOR,MAAM,WAEzDG,K,WCpGb,SAASO,IACL,OAAQ,mCACJ,8BAAK,gCAED,sBAAI,cAAC,IAAD,CAAMjB,GAAG,wBAAT,uDACJ,sBAAI,cAAC,IAAD,CAAMA,GAAG,wBAAT,gDACJ,sBAAI,cAAC,IAAD,CAAMA,GAAG,iBAAT,yCAMhB,SAASkB,IAELC,QAAQC,IAAI,cAEZ,MAA4BlB,mBAAS,GAArC,mBAAQC,EAAR,KAAeC,EAAf,KAIA,OAFAe,QAAQC,IAAI,sBAAwBjB,GAGhC,eAAC,WAAD,WACI,uEAEA,4CAAYA,KAEZ,uBAAOE,KAAK,SAASC,QAAS,WAC1Ba,QAAQC,IAAI,kCAAoCjB,GAChDC,EAASD,EAAQ,IAClBI,MAAM,kBAET,uBAAOF,KAAK,SAASC,QAAS,kBAAMF,GAAS,SAAAiB,GAGzC,OAFAF,QAAQC,IAAI,kCAAoCjB,GAChDgB,QAAQC,IAAI,6BAA+BC,GACpCA,EAAO,MACVd,MAAM,uBAEd,uBAAOF,KAAK,SAASC,QAAS,WAE1Ba,QAAQC,IAAI,kCAAoCjB,GAEhDC,GAAS,SAAAiB,GAGL,OAFAF,QAAQC,IAAI,6BAA+BC,GAC3CF,QAAQC,IAAI,gCAAkCjB,GACvCkB,EAAK,KAEhBjB,GAAS,SAAAiB,GAGL,OAFAF,QAAQC,IAAI,6BAA+BC,GAC3CF,QAAQC,IAAI,gCAAkCjB,GACvCkB,EAAK,MAGjBd,MAAM,iCAET,uBAAOF,KAAK,SAASC,QAAS,kBAAMF,GAAS,SAAAiB,GAGzC,OADAF,QAAQC,IAAI,kCAAoCjB,GACzCkB,MAEHd,MAAM,wCAU1B,SAASe,IAELH,QAAQC,IAAI,cAEZ,MAA0BlB,mBACtB,CACIqB,MAAO,IACPC,OAAQ,MAHhB,mBAAQC,EAAR,KAAcC,EAAd,KASA,OAFAP,QAAQC,IAAI,oCAAsCK,EAAKF,OAGnD,eAAC,WAAD,WACK,uEAED,mFACA,uBAAOlB,KAAK,SAASC,QAAS,WAE1BoB,EAAQ,2BAAMD,GAAP,IAAaF,MAAOE,EAAKF,MAAQ,QAEzChB,MAAM,8BAGT,sFACA,uBAAOF,KAAK,SAASC,QAAS,WAG1BmB,EAAKF,MAAQE,EAAKF,MAAQ,IAC1BG,EAASD,IAEVlB,MAAM,uCAET,uBAAOF,KAAK,SAASC,QAAS,WAG1BoB,EAASD,IAEVlB,MAAM,uDAGT,uBAAOF,KAAK,SAASC,QAAS,WAE1B,IAAIqB,EAAU,CACVJ,MAAOE,EAAKF,MACZC,OAAQC,EAAKD,QAEjBE,EAASC,IAEVpB,MAAM,qDAGT,2DACA,uBAAOF,KAAK,SAASC,QAAS,kBAAMoB,GAAQ,SAAAL,GAExC,OAAO,eAAKA,OAERd,MAAM,qEACd,uBAAOF,KAAK,SAASC,QAAS,kBAAMoB,GAAQ,SAAAL,GAExC,OAAOA,MAEHd,MAAM,wEACd,uBAAOF,KAAK,SAASC,QAAS,kBAAMoB,GAAQ,SAAAL,GAGxC,OADAA,EAAKE,MAAQF,EAAKE,MAAQ,IACnBF,MAEHd,MAAM,wEAO1B,SAASqB,IACLT,QAAQC,IAAI,4BAEZ,MAA0BlB,oBAAS,GAAnC,mBAAQ2B,EAAR,KAAcC,EAAd,KAEA,OAAQ,qCACJ,uBAAOzB,KAAK,SAASC,QAAS,WAC1BwB,GAAQ,SAAAT,GAAI,OAAKA,MACdd,MAAM,WACb,sBAEEsB,GAAQ,cAACE,EAAD,KACPF,GAAQ,2DAInB,SAASE,IACLZ,QAAQC,IAAI,wBAEZ,MAA4BlB,mBAAS,GAArC,mBAAQC,EAAR,KAAeC,EAAf,KAEA,EAA0BF,oBAAS,WAE/B,OADAiB,QAAQC,IAAI,sBACL,CACH,CAAEY,KAAM,KAAMC,IAAK,IACnB,CAAED,KAAM,KAAMC,IAAK,IACnB,CAAED,KAAM,KAAMC,IAAK,IACnB,CAAED,KAAM,KAAMC,IAAK,QAN3B,mBAAQR,EAAR,UAUA,OAAQ,qCACJ,uEACA,4CAAYtB,KAEZ,uBAAOE,KAAK,SAASC,QAAS,WAC1BF,GAAS,SAAAiB,GAAI,OAAIA,EAAK,MACnBd,MAAM,UACb,sBAEEkB,GAAQA,EAAKS,KAAI,SAAAC,GACf,OAAO,yCAAG,sBAAH,IAAQ,+BAAOA,EAAKH,OAApB,IAAiC,+BAAOG,EAAKF,MAA7C,aC3LnB,SAASG,IACL,OAAQ,mCACJ,8BAAK,gCAED,sBAAI,cAAC,IAAD,CAAMpC,GAAG,uBAAT,iCACJ,sBAAI,cAAC,IAAD,CAAMA,GAAG,mCAAT,2CAMhB,SAASqC,IACLlB,QAAQC,IAAI,yBAEZ,MAA4BlB,mBAAS,GAArC,mBAAQC,EAAR,KAAeC,EAAf,KACA,EAAwCF,mBAAS,KAAjD,mBAAQoC,EAAR,KAAqBC,EAArB,KAwBA,OAbAC,qBAAU,WACNrB,QAAQC,IAAI,wCAGhBoB,qBAAU,WACNrB,QAAQC,IAAI,0CACb,IAEHoB,qBAAU,WACNrB,QAAQC,IAAI,iDACb,CAAEjB,IAELgB,QAAQC,IAAI,kCAER,eAAC,WAAD,WACI,uEAEA,4CAAYjB,EAAZ,yBAAsCmC,KACtC,uBAAOjC,KAAK,SAASC,QA3BT,WAChBa,QAAQC,IAAI,uCACZhB,EAASD,EAAQ,IAyB8BI,MAAM,0BACjD,uBAAOF,KAAK,SAASC,QAxBH,WACtBa,QAAQC,IAAI,8CACZmB,EAAeD,EAAc,IAsBwB/B,MAAM,iDAMnE,SAASkC,IACLtB,QAAQC,IAAI,yBAEZ,MAA4BlB,mBAAS,GAArC,mBAAQC,EAAR,KAAeC,EAAf,KAQA,OADAe,QAAQC,IAAI,kCAER,eAAC,WAAD,WACI,uEAEA,4CAAYjB,KAEZ,uBAAOE,KAAK,SAASC,QAZT,WAChBa,QAAQC,IAAI,uCACZhB,EAASD,EAAQ,IAU8BI,MAAM,mCAEjD,cAACmC,EAAD,CAA4BC,GAAIxC,OAS5C,SAASuC,EAA2BE,GAChCzB,QAAQC,IAAI,yBAEZ,MAA4BlB,mBAAS,GAArC,mBAAQC,EAAR,KAAeC,EAAf,KACA,EAA0BF,mBAAS,IAAnC,mBAAQ2C,EAAR,KAAcC,EAAd,KAiCA,OArBAN,qBAAU,WACNrB,QAAQC,IAAI,+CAJZ0B,EAAQ,GAOG3C,KAEZ,CAACA,IAEJqC,qBAAU,WAMNrB,QAAQC,IAAI,kDAHR0B,EAAQ,GAAK3C,KAOlB,CAACyC,EAAMD,KAEVxB,QAAQC,IAAI,kCAER,eAAC,WAAD,WACI,oDAAoBjB,KACpB,+CAAkB0C,KAClB,uBAAOxC,KAAK,SAASC,QAnCT,WAChBa,QAAQC,IAAI,uCACZhB,EAASD,EAAQ,IAiC8BI,MAAM,mC,4BCvH7D,SAASwC,EAAWJ,EAAYK,EAAcC,GAE1C,OADA9B,QAAQC,IAAI,eACL,CACHuB,GAAIA,EACJO,YAAaF,EACbG,QAAS,IAAIC,KACbH,KAAMA,EACNI,MAAM,GA2Dd,SAASC,IACL,OACI,8BACI,uCAEI,cAAC,IAAD,CAAMtD,GAAG,WAAT,qBAFJ,OAII,cAAC,IAAD,CAAMA,GAAG,OAAT,4BAahB,SAASuD,EAAQX,GACb,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOY,KAAK,WAAZ,SACI,cAACC,EAAD,CACIC,UAAWd,EAAMc,UACjBC,SAAUf,EAAMe,SAChBC,OAAQhB,EAAMgB,WAItB,cAAC,IAAD,CAAOJ,KAAK,OAAZ,SACI,cAACK,EAAD,CAAYC,OAAQlB,EAAMkB,WAG9B,eAAC,IAAD,CAAON,KAAK,IAAZ,cACI,cAACC,EAAD,CACIC,UAAWd,EAAMc,UACjBC,SAAUf,EAAMe,SAChBC,OAAQhB,EAAMgB,eAalC,SAASH,EAAWb,GAChB,OACI,eAAC,IAAMmB,SAAP,WACI,kDAEA,kCAEI,oCACA,yCACA,sCACA,4CACA,0CAEA,0CACA,0CAECnB,EAAMc,UAAUxB,KAAI,SAAA8B,GACjB,OACI,cAACC,EAAD,CAA2BC,KAAMF,EAAUG,cAAevB,EAAMe,SAAUS,YAAaxB,EAAMgB,QAA/EI,EAASrB,aAe/C,SAASsB,EAAQrB,GACb,OAAQ,+BACJ,6BAAKA,EAAMsB,KAAKvB,KAChB,6BAAKC,EAAMsB,KAAKhB,cAChB,6BAAKN,EAAMsB,KAAKjB,OAChB,6BAAKoB,EAAmBzB,EAAMsB,KAAKf,WAJ/B,IAKJ,6BAAKmB,OAAO1B,EAAMsB,KAAKb,QAEvB,6BAAI,uBAAOhD,KAAK,SAASC,QAAS,kBAAMsC,EAAMuB,cAAcvB,EAAMsB,OAAO3D,MAAM,iBAC/E,6BAAI,uBAAOF,KAAK,SAASC,QAAS,kBAAMsC,EAAMwB,YAAYxB,EAAMsB,OAAO3D,MAAM,kBAOrF,SAASsD,EAAWjB,GAEhB,IAAM2B,EAAUC,cAEhB,EAAwBtE,oBAAe,kBAAM6C,EAAW,EAAG,GAAI,MAA/D,mBAAOtB,EAAP,KAAaC,EAAb,KAEA,EAAwBxB,mBAAS,SAAjC,mBAAOuE,EAAP,KAAaC,EAAb,KACA,EAAgCxE,oBAAS,GAAzC,mBAAOyE,EAAP,KAAiBC,EAAjB,KAcMC,EAAoB,SAACC,ICrMhB,SACXpD,EACAoD,GAEA,IAAMC,EAASD,EAAMC,OACf/C,EAAO+C,EAAO/C,KAEA,aAAhB+C,EAAO1E,MAAuC,UAAhB0E,EAAO1E,KACrCqB,GAAQ,SAAAD,GAAU,OAAO,2BAAIA,GAAX,kBAAkBO,EAAO+C,EAAOC,aAElC,SAAhBD,EAAO1E,KACPqB,GAAQ,SAAAD,GAAU,OAAO,2BAAIA,GAAX,kBAAkBO,EAAO,IAAIoB,KAAK2B,EAAOxE,YAG3DmB,GAAQ,SAAAD,GAAU,OAAO,2BAAIA,GAAX,kBAAkBO,EAAO+C,EAAOxE,WDwLlD0E,CAAevD,EAASoD,IAW5BI,IAAM1C,WAAU,WACZ2C,EAAS1D,KACV,CAACA,IAEJ,IAAM0D,EAAW,SAACC,GACd,IAAIC,EAAU,GACkB,KAA5BD,EAAYlC,cACZmC,GAAoB,uCAExB,IAAIC,EAAM,IAAIlC,KACdkC,EAAIC,SAAS,EAAE,EAAE,EAAE,GACfH,EAAYjC,QAAUmC,IACtBD,GAAoB,kDAGxBX,EAAQW,GACRT,EAAwB,KAAZS,IAGhB,OACI,eAAC,IAAMtB,SAAP,WACI,mDACA,uBAAMyB,SA9CG,SAACV,GACdA,EAAMW,sBAGOC,IAATjE,GACAmB,EAAMkB,OAAOrC,GAGjB8C,EAAQ3D,KAAK,aAsCT,UAEI,uBAAO+E,QAAQ,OAAf,qBAFJ,IAGI,uBAAOhD,GAAG,OAAOtC,KAAK,OAAO2B,KAAK,cAAc4D,YAAY,mBACxDrF,MAAK,OAAEkB,QAAF,IAAEA,OAAF,EAAEA,EAAMyB,YACb2C,SAAUhB,IAGd,uBAAOc,QAAQ,OAAf,0BACA,yBACIhD,GAAG,OACHpC,MAAK,OAAEkB,QAAF,IAAEA,OAAF,EAAEA,EAAMwB,KACb4C,SAAU,SAAAC,GAAC,OAAIpE,EAAQ,2BAAID,GAAL,IAAWwB,KAAM8C,SAASD,EAAEf,OAAOxE,WAH7D,UAMI,wBAAQA,MAAM,IAAd,yBACA,wBAAQA,MAAM,IAAd,yCACA,wBAAQA,MAAM,IAAd,0CAGJ,uBAAOoF,QAAQ,UAAf,wBACA,uBACI3D,KAAK,UACL3B,KAAK,OACLsC,GAAG,UACHpC,MAAO8D,EAAkB,OAAC5C,QAAD,IAACA,OAAD,EAACA,EAAM0B,SAChC0C,SAAUhB,IAGd,uBAAOc,QAAQ,OAAf,uBACA,uBACI3D,KAAK,OACL3B,KAAK,WACLsC,GAAG,OACHqC,QAAO,OAAEvD,QAAF,IAAEA,OAAF,EAAEA,EAAM4B,KACfwC,SAAUhB,IAGd,sBACA,uBAAOxE,KAAK,SAASE,MAAM,YAAYyF,SAAUrB,IAEjD,sBAGe,kDAAclD,QAAd,IAAcA,OAAd,EAAcA,EAAMyB,YAApB,aAAoCzB,QAApC,IAAoCA,OAApC,EAAoCA,EAAMwB,KAA1C,MAAmDqB,OAAM,OAAC7C,QAAD,IAACA,OAAD,EAACA,EAAM4B,MAAhE,OAKX,qCACI,sBACA,0CAAaoB,cASrC,SAASJ,EAAmB4B,GAExB,IAAIC,EAAK5B,OAAO2B,EAAKE,WAAWC,SAAS,EAAG,KACxCC,EAAK/B,OAAO2B,EAAKK,WAAa,GAAGF,SAAS,EAAG,KAGjD,OAFWH,EAAKM,cAEF,IAAMF,EAAK,IAAMH,EEnSnC,SAASnD,EAAWJ,EAAYK,EAAcC,GAE1C,OADA9B,QAAQC,IAAI,eACL,CACHuB,GAAIA,EACJO,YAAaF,EACbG,QAAS,IAAIC,KACbH,KAAMA,EACNI,MAAM,GA2Dd,SAASC,IACL,OACI,8BACI,uCAEI,cAAC,IAAD,CAAMtD,GAAG,WAAT,qBAFJ,OAII,cAAC,IAAD,CAAMA,GAAG,OAAT,4BAahB,SAASuD,EAAQX,GACb,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOY,KAAK,WAAZ,SACI,cAAC,EAAD,CACIE,UAAWd,EAAMc,UACjBC,SAAUf,EAAMe,SAChBC,OAAQhB,EAAMgB,WAItB,cAAC,IAAD,CAAOJ,KAAK,OAAZ,SACI,cAAC,EAAD,CAAYM,OAAQlB,EAAMkB,WAG9B,eAAC,IAAD,CAAON,KAAK,IAAZ,cACI,cAAC,EAAD,CACIE,UAAWd,EAAMc,UACjBC,SAAUf,EAAMe,SAChBC,OAAQhB,EAAMgB,eAalC,SAASH,EAAWb,GAChB,OACI,eAAC,IAAMmB,SAAP,WACI,kDAEA,kCAEI,oCACA,yCACA,sCACA,4CACA,0CAEA,0CACA,0CAECnB,EAAMc,UAAUxB,KAAI,SAAA8B,GACjB,OACI,cAAC,EAAD,CAA2BE,KAAMF,EAAUG,cAAevB,EAAMe,SAAUS,YAAaxB,EAAMgB,QAA/EI,EAASrB,aAe/C,SAASsB,EAAQrB,GACb,OAAQ,+BACJ,6BAAKA,EAAMsB,KAAKvB,KAChB,6BAAKC,EAAMsB,KAAKhB,cAChB,6BAAKN,EAAMsB,KAAKjB,OAChB,6BAAKoB,EAAmBzB,EAAMsB,KAAKf,WAJ/B,IAKJ,6BAAKmB,OAAO1B,EAAMsB,KAAKb,QAEvB,6BAAI,uBAAOhD,KAAK,SAASC,QAAS,kBAAMsC,EAAMuB,cAAcvB,EAAMsB,OAAO3D,MAAM,iBAC/E,6BAAI,uBAAOF,KAAK,SAASC,QAAS,kBAAMsC,EAAMwB,YAAYxB,EAAMsB,OAAO3D,MAAM,kBAQrF,SAASsD,EAAWjB,GAEhB,IAAM2B,EAAUC,cAIVgC,EAAiBC,iBAAyB,MAC1CC,EAAiBD,iBAA0B,MAC3CE,EAAiBF,iBAAyB,MAC1CG,EAAiBH,iBAAyB,MAkBhD,OACI,eAAC,IAAM1C,SAAP,WACI,kEACA,uBAAMyB,SAnBG,SAACV,GAAuC,IAAD,QACpDA,EAAMW,iBAEN,IAAIvB,EAAOnB,EAAW,EAAG,GAAI,GAE7BmB,EAAKhB,aAAc,UAAAsD,EAAeK,eAAf,eAAwBtG,QAAS,GACpD2D,EAAKjB,KAAO8C,UAAU,UAAAW,EAAeG,eAAf,eAAwBtG,QAAS,KACvD2D,EAAKf,QAAU,IAAIC,MAAK,UAAAuD,EAAeE,eAAf,eAAwBtG,QAAS,IACzD2D,EAAKb,MAAO,UAAAuD,EAAeC,eAAf,eAAwB7B,WAAW,EAE/CpC,EAAMkB,OAAOI,GAGbK,EAAQ3D,KAAK,aAMT,UAEI,uBAAO+E,QAAQ,OAAf,qBAFJ,IAGI,uBAAOhD,GAAG,OAAOtC,KAAK,OAAO2B,KAAK,cAAc4D,YAAY,mBAGxDkB,IAAKN,IAGT,uBAAOb,QAAQ,OAAf,0BACA,yBACIhD,GAAG,OAGHmE,IAAKJ,EAJT,UAMI,wBAAQnG,MAAM,IAAd,yBACA,wBAAQA,MAAM,IAAd,yCACA,wBAAQA,MAAM,IAAd,0CAGJ,uBAAOoF,QAAQ,UAAf,wBACA,uBACI3D,KAAK,UACL3B,KAAK,OACLsC,GAAG,UAGHmE,IAAKH,IAGT,uBAAOhB,QAAQ,OAAf,uBACA,uBACI3D,KAAK,OACL3B,KAAK,WACLsC,GAAG,OAGHmE,IAAKF,IAGT,sBACA,uBAAOvG,KAAK,SAASE,MAAM,cAE3B,4BAYhB,SAAS8D,EAAmB4B,GAExB,IAAIC,EAAK5B,OAAO2B,EAAKE,WAAWC,SAAS,EAAG,KACxCC,EAAK/B,OAAO2B,EAAKK,WAAa,GAAGF,SAAS,EAAG,KAGjD,OAFWH,EAAKM,cAEF,IAAMF,EAAK,IAAMH,ECrQpBa,MAaf,WAEI,OAAQ,mCACJ,cAAC,IAAMhD,SAAP,UACI,eAAC,IAAD,WACI,sBAAI,cAAC,IAAD,CAAM/D,GAAG,IAAT,wCAEJ,eAAC,IAAD,WAGQgH,EAAW9E,KAAI,SAAA+E,GACX,OAAO,cAAC,IAAD,CAAOzD,KAAMyD,EAAczD,KAAM0D,UAAWD,EAAcC,eAIzE,cAAC,IAAD,CAAO1D,KAAK,IAAZ,SACI,cAAC2D,EAAD,iBA3BlBH,EAAa,CACf,CAACI,KAAM,kBAAmB5D,KAAK,QAAS0D,UHoBrC,WAGH,MAA0BhC,IAAMhF,SAAiB,IAAjD,mBAAQuB,EAAR,KAAcC,EAAd,KACA,EAA8BwD,IAAMhF,SAAS,GAA7C,mBAAQmH,EAAR,KAAgBC,EAAhB,KA4BA,OA1BApC,IAAM1C,WAAU,WACZd,EAbG,CACHqB,GAAY,EAAG,uBAAwB,GACvCA,GAAY,EAAG,iBAAkB,OAYlC,IAyBC,cAAC,IAAMgB,SAAP,UACI,eAAC,IAAD,kBACI,cAACT,EAAD,IACA,cAACC,EAAD,CACIG,UAAWjC,EACXqC,OA5BC,SAACI,GAEdA,EAAKvB,GAAK0E,EACVC,EAAUD,EAAS,GAEnB3F,EAAQ,GAAD,mBAAMD,GAAN,CAAYyC,MAwBPP,SArBK,SAACO,GAClBxC,EAASD,EAAK8F,QAAO,SAAAvD,GAAQ,OAAIA,EAASrB,KAAOuB,EAAKvB,QAqB1CiB,OAlBG,SAACM,GAEhB,IAAMsD,EAAI,YAAO/F,GAEXgG,EAAQD,EAAKE,WAAU,SAAAC,GAAO,OAAIA,EAAQhF,KAAOuB,EAAKvB,MAC5D6E,EAAKC,GAAOpE,MAAO,EAEnB3B,EAAQ8F,aGhDZ,CAACJ,KAAM,iCAAkC5D,KAAK,oBAAqB0D,UDgBhE,WAGH,MAA0BhC,IAAMhF,SAAiB,IAAjD,mBAAQuB,EAAR,KAAcC,EAAd,KACA,EAA8BwD,IAAMhF,SAAS,GAA7C,mBAAQmH,EAAR,KAAgBC,EAAhB,KA4BA,OA1BApC,IAAM1C,WAAU,WACZd,EAbG,CACHqB,GAAY,EAAG,uBAAwB,GACvCA,GAAY,EAAG,iBAAkB,OAYlC,IAyBC,cAAC,IAAMgB,SAAP,UACI,eAAC,IAAD,kBACI,cAAC,EAAD,IACA,cAAC,EAAD,CACIL,UAAWjC,EACXqC,OA5BC,SAACI,GAEdA,EAAKvB,GAAK0E,EACVC,EAAUD,EAAS,GAEnB3F,EAAQ,GAAD,mBAAMD,GAAN,CAAYyC,MAwBPP,SArBK,SAACO,GAClBxC,EAASD,EAAK8F,QAAO,SAAAvD,GAAQ,OAAIA,EAASrB,KAAOuB,EAAKvB,QAqB1CiB,OAlBG,SAACM,GAEhB,IAAMsD,EAAI,YAAO/F,GAEXgG,EAAQD,EAAKE,WAAU,SAAAC,GAAO,OAAIA,EAAQhF,KAAOuB,EAAKvB,MAC5D6E,EAAKC,GAAOpE,MAAO,EAEnB3B,EAAQ8F,aC5CZ,CAACJ,KAAM,YAAa5D,KAAK,aAAc0D,UCdpC,WAEH,MAAwBhH,mBAAS,WAAjC,mBAAO8B,EAAP,KAAa4F,EAAb,KACA,EAAgC1H,mBAAS,OAAzC,mBAAO2H,EAAP,KAAiBC,EAAjB,KACA,EAA0B5H,mBAAS,OAAnC,mBAAOK,EAAP,KAAcwH,EAAd,KACA,EAA4B7H,mBAAS,IAArC,mBAAO8H,EAAP,KAAeC,EAAf,KAOA,OAAS,eAAC,IAAMlE,SAAP,WACL,sBAAKmE,UAAU,YAAf,UAEI,iDAGA,uBAAO7H,KAAK,OAAO2B,KAAK,OAAOzB,MAAOyB,EAAM6D,SAAU,SAAAC,GAAC,OAAI8B,EAAQ9B,EAAEf,OAAOxE,UAE5E,2DAGA,uBAAOF,KAAK,OAAO2B,KAAK,OAAOzB,MAAOsH,EAAUhC,SAAU,SAAAC,GAAC,OAAIgC,EAAYhC,EAAEf,OAAOxE,UAEpF,kDAGA,uBAAOF,KAAK,OAAO2B,KAAK,OAAOzB,MAAOA,EAAOsF,SAAU,SAAAC,GAAC,OAAIiC,EAASjC,EAAEf,OAAOxE,UAE9E,wBAAQD,QAAS,kBAvBT,WACZ,IAAM6H,EAAWC,WAAWP,GAAYO,WAAW7H,GACnD0H,EAAUE,EAASE,YAqBQC,IAAvB,0BAMJ,sBACA,6DAAgCT,EAAhC,eAAsD7F,EAAtD,gBAAyEgG,EAAzE,uBDtBJ,CAACZ,KAAM,aAAc5D,KAAK,UAAW0D,UEsFlC,WAMH,OAAQ,qCACN,sBAEH,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAGhF,KAAI,SAAAC,GACjB,OAAO,yBAAQ7B,QAAS,kBARHH,EAQqBgC,OAPtChB,QAAQC,IAAI,YAAcjB,GADV,IAACA,GAQd,mBAAkDgC,aF/FzD,CAACiF,KAAM,cAAe5D,KAAK,UAAW0D,UGtBnC,WACH,MAA0BhH,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAQA,OALAoC,qBAAU,WAER+F,SAASC,MAAT,sBAAgCrI,EAAhC,aAIE,gCACI,6CAAgBA,EAAhB,YACA,wBAAQG,QAAS,kBAAMF,EAASD,EAAQ,IAAxC,2BHWR,CAACiH,KAAM,mBAAoB5D,KAAK,gBAAiB0D,UNlBtC,WACX,OAAQ,qCACJ,sBAAI,cAAC,IAAD,CAAMlH,GAAG,gBAAT,gCAEJ,eAAC,IAAD,WACI,cAAC,IAAD,CAAOwD,KAAK,wBAAwB0D,UAAWjH,IAC/C,cAAC,IAAD,CAAOuD,KAAK,6BAA6B0D,UAAW1G,IACpD,cAAC,IAAD,CAAOgD,KAAK,4BAA4B0D,UAAWzG,IACnD,cAAC,IAAD,CAAO+C,KAAK,kCAAkC0D,UAAWpG,IAEzD,cAAC,IAAD,CAAO0C,KAAK,gBAAgB0D,UAAWnH,YMS/C,CAACqH,KAAM,iBAAkB5D,KAAK,YAAa0D,ULnBhC,WACX,OAAQ,qCACJ,sBAAI,cAAC,IAAD,CAAMlH,GAAG,YAAT,mCAEJ,eAAC,IAAD,WACI,cAAC,IAAD,CAAOwD,KAAK,wBAAwB0D,UAAWhG,IAC/C,cAAC,IAAD,CAAOsC,KAAK,wBAAwB0D,UAAW5F,IAC/C,cAAC,IAAD,CAAOkC,KAAK,iBAAiB0D,UAAWtF,IAExC,cAAC,IAAD,CAAO4B,KAAK,YAAY0D,UAAWjG,YKW3C,CAACmG,KAAM,kBAAmB5D,KAAK,aAAc0D,UJpBlC,WACX,OAAQ,qCACJ,sBAAI,cAAC,IAAD,CAAMlH,GAAG,aAAT,oCAEJ,eAAC,IAAD,WACI,cAAC,IAAD,CAAOwD,KAAK,uBAAuB0D,UAAW7E,IAC9C,cAAC,IAAD,CAAOmB,KAAK,mCAAmC0D,UAAWzE,IAE1D,cAAC,IAAD,CAAOe,KAAK,aAAa0D,UAAW9E,aIwChD,SAAS+E,IACL,OAAQ,qCACJ,8CAEA,8BACI,8BAGQH,EAAW9E,KAAI,SAAA+E,GACX,OAAO,qCAAE,sBAAI,cAAC,IAAD,CAAMjH,GAAIiH,EAAczD,KAAxB,SAA+ByD,EAAcG,OAAnD,iBIpDhBqB,MARf,WACE,OACE,cAAC,IAAM1E,SAAP,UACE,cAACgD,EAAD,OCOS2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFd,SAASe,eAAe,SAM1BZ,M","file":"static/js/main.e0ea8fde.chunk.js","sourcesContent":["import {\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport { Fragment, useState } from 'react';\r\n\r\nexport default function HookStateOverview() {\r\n    return (<>\r\n        <p/><Link to=\"/hookoverview\">Zurück zu Hooks</Link>\r\n\r\n        <Switch>\r\n            <Route path=\"/hookoverview/counter\" component={Counter} />\r\n            <Route path=\"/hookoverview/multicounter\" component={CounterMultiple} />\r\n            <Route path=\"/hookoverview/flexcounter\" component={CounterChooser} />\r\n            <Route path=\"/hookoverview/switchflexcounter\" component={AntiCounterChooser} />\r\n            \r\n            <Route path=\"/hookoverview\" component={HookOverviewLinks} />\r\n        </Switch>\r\n    </>);\r\n};\r\n\r\nfunction HookOverviewLinks() {\r\n    return (<>\r\n        <div><nav>\r\n\r\n            <p/><Link to=\"/hookoverview/counter\">Einfacher Zähler</Link>\r\n            <p/><Link to=\"/hookoverview/multicounter\">Mehrere einfache Zähler</Link>\r\n            <p/><Link to=\"/hookoverview/flexcounter\">Flexibele Anzahl Zähler</Link>\r\n            <p/><Link to=\"/hookoverview/switchflexcounter\">Umschaltbarer Flexibeler Zähler</Link>\r\n            \r\n        </nav></div>\r\n    </>);\r\n};\r\n\r\nfunction Counter() {\r\n    const [ count, setCount ] = useState(0);\r\n    return (\r\n        <Fragment>\r\n\r\n            <p>Zähler: {count}</p>\r\n\r\n            <input type=\"button\" onClick={() => setCount(count - 1)} value=\"c--\" />\r\n            <input type=\"button\" onClick={() => setCount(count + 1)} value=\"c++\" />\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n// Mehrere Counter...\r\nfunction CounterMultiple() {\r\n    return (<>\r\n        <Counter />\r\n        <Counter />\r\n        <Counter />\r\n        <Counter />\r\n    </>);\r\n};\r\n\r\n// Flexible Anzahl an Countern...\r\nfunction CounterChooser() {\r\n    const [ count, setCount ] = useState(0);\r\n\r\n    let content = [];\r\n    for (let i=0; i < count; i++) {\r\n        content.push(<Counter />);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <p>Anzahl: {count}</p>\r\n\r\n            <input type=\"button\" onClick={() => setCount(count - 1)} value=\"Anzahl --\" />\r\n            <input type=\"button\" onClick={() => setCount(count + 1)} value=\"Anzahl ++\" />\r\n\r\n            {content}\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n// Counter mit String statt mit Number\r\nfunction AntiCounter() {\r\n    const [ count, setCount ] = useState(\"0\");\r\n    return (\r\n        <Fragment>\r\n\r\n            <p>Zähler: {count}</p>\r\n\r\n            <input type=\"button\" onClick={() => setCount(count + \"-\")} value=\"c--\" />\r\n            <input type=\"button\" onClick={() => setCount(count + \"+\")} value=\"c++\" />\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n// Umschaltbar ob Counter oder AntiCounter ausgegeben werden sollen. \r\nfunction AntiCounterChooser() {\r\n    const [ count, setCount ] = useState(0);\r\n    const [ kind, setKind ] = useState(false);\r\n\r\n    let content = [];\r\n    for (let i=0; i < count; i++) {\r\n        if (kind) {\r\n            content.push(<AntiCounter />);\r\n        } else {\r\n            content.push(<Counter />);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <p>Anzahl: {count} --- Komponenten-Art: {kind ? \"string\" : \"number\"} </p>\r\n\r\n            <input type=\"button\" onClick={() => setCount(count - 1)} value=\"c--\" />\r\n            <input type=\"button\" onClick={() => setCount(count + 1)} value=\"c++\" />\r\n\r\n            <input type=\"button\" onClick={() => setKind(!kind)} value=\"Switch\" />\r\n\r\n            {content}\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n","import {\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport { Fragment, useState } from 'react';\r\n\r\nexport default function UseStateOverview() {\r\n    return (<>\r\n        <p/><Link to=\"/usestate\">Zurück zu useState</Link>\r\n\r\n        <Switch>\r\n            <Route path=\"/usestate/prevcounter\" component={CounterPrevStateTest} />\r\n            <Route path=\"/usestate/statechange\" component={StateChangeTest} />\r\n            <Route path=\"/usestate/lazy\" component={LazyStateTest} />\r\n            \r\n            <Route path=\"/usestate\" component={UseStateOverviewLinks} />\r\n        </Switch>\r\n    </>);\r\n};\r\n\r\nfunction UseStateOverviewLinks() {\r\n    return (<>\r\n        <div><nav>\r\n\r\n            <p/><Link to=\"/usestate/prevcounter\">Zähler mit funktionaler Aktualisierung</Link>\r\n            <p/><Link to=\"/usestate/statechange\">Aktualisierung mit komplexen Daten</Link>\r\n            <p/><Link to=\"/usestate/lazy\">Lazy initialisierung</Link>\r\n            \r\n        </nav></div>\r\n    </>);\r\n};\r\n\r\nfunction CounterPrevStateTest() {\r\n\r\n    console.log(\"--called--\");\r\n\r\n    const [ count, setCount ] = useState(1);\r\n    \r\n    console.log(\"--Aktueller Count: \" + count);\r\n\r\n    return (\r\n        <Fragment>\r\n            <p>Konsole öffnen um Ausgabe zu sehen.</p>\r\n\r\n            <p>Zähler: {count}</p>\r\n\r\n            <input type=\"button\" onClick={() => {\r\n                console.log(\"Event-Handler aktueller Count: \" + count);\r\n                setCount(count + 1);\r\n            }} value=\"1 setCount +1\" />\r\n\r\n            <input type=\"button\" onClick={() => setCount(prev => {\r\n                console.log(\"Event-Handler aktueller Count: \" + count);\r\n                console.log(\"Event-Handler prev count: \" + prev);\r\n                return prev + 1;\r\n                })} value=\"2 setCount prev +1\" />\r\n\r\n            <input type=\"button\" onClick={() => {\r\n                \r\n                console.log(\"Event-Handler aktueller Count: \" + count);\r\n\r\n                setCount(prev => {\r\n                    console.log(\"Event-Handler prev count: \" + prev);\r\n                    console.log(\"Event-Handler current count: \" + count);\r\n                    return prev+1;\r\n                });\r\n                setCount(prev => {\r\n                    console.log(\"Event-Handler prev count: \" + prev);\r\n                    console.log(\"Event-Handler current count: \" + count);\r\n                    return prev+1;\r\n                });\r\n\r\n            }} value=\"3 doppelter setCount prev +1\" />\r\n\r\n            <input type=\"button\" onClick={() => setCount(prev => {\r\n\r\n                console.log(\"Event-Handler aktueller Count: \" + count);\r\n                return prev;\r\n\r\n                })} value=\"4 setCount prev ohne Änderung\" />\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n\r\ninterface TestData {\r\n    first: string\r\n    second: string\r\n};\r\nfunction StateChangeTest() {\r\n\r\n    console.log(\"--called--\");\r\n\r\n    const [ data, setData ] = useState<TestData>(\r\n        {\r\n            first: \"1\",\r\n            second: \"2\"\r\n        }\r\n    );\r\n\r\n    console.log(\"--Aktueller Zustand: data.first: \" + data.first);\r\n\r\n    return (\r\n        <Fragment>\r\n             <p>Konsole öffnen um Ausgabe zu sehen.</p>\r\n\r\n            <p>Änderungen am Zustand, eine Kopie wird erzeugt.</p>\r\n            <input type=\"button\" onClick={() => {\r\n\r\n                setData( { ...data, first: data.first + \"1\"} );\r\n\r\n            }} value=\"1 - Zustand kopieren / +1\" />\r\n            \r\n\r\n            <p>Änderungen am Zustand ohne eine Kopie zu erzeugen.</p>\r\n            <input type=\"button\" onClick={() => {\r\n\r\n                // Änderungen werden nicht immer in die UI übernommen, sind aber im State korrekt gesetzt\r\n                data.first = data.first + \"2\";\r\n                setData( data );\r\n\r\n            }} value=\"2 - Zustand direkt bearbeiten / +2\" />\r\n\r\n            <input type=\"button\" onClick={() => {\r\n\r\n                // Ein re-render wird nur einmalig ausgelöst.\r\n                setData( data );\r\n\r\n            }} value=\"3 - Zustand direkt bearbeiten / ohne Änderungen\" />\r\n\r\n\r\n            <input type=\"button\" onClick={() => {\r\n                \r\n                let newData = {\r\n                    first: data.first,\r\n                    second: data.second\r\n                };\r\n                setData( newData );\r\n\r\n            }} value=\"4 - Zustand kopieren komplett ohne Änderungen\" />\r\n\r\n\r\n            <p>Funktionale Aktualisierung</p>\r\n            <input type=\"button\" onClick={() => setData(prev => {\r\n\r\n                return { ...prev };\r\n\r\n                })} value=\"5 - Funktionale Aktualisierung / Neues Objekt ohne Änderungen\" />\r\n            <input type=\"button\" onClick={() => setData(prev => {\r\n\r\n                return prev;\r\n\r\n                })} value=\"6 - Funktionale Aktualisierung / Original Objekt ohne Änderungen\" />\r\n            <input type=\"button\" onClick={() => setData(prev => {\r\n\r\n                prev.first = prev.first + \"7\";\r\n                return prev;\r\n\r\n                })} value=\"7 - Funktionale Aktualisierung / Original Objekt mit Änderung\" />\r\n\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nfunction LazyStateTest() {\r\n    console.log(\"--called LazyStateTest--\");\r\n\r\n    const [ show, setShow ] = useState(false);\r\n\r\n    return (<>\r\n        <input type=\"button\" onClick={() => {\r\n            setShow(prev => !prev);\r\n            }} value=\"Toggle\" />\r\n        <p/>\r\n\r\n        { show && <LazyState /> }\r\n        { !show && <p>Komponente ausgeblendet</p> }\r\n    </>);\r\n};\r\n\r\nfunction LazyState() {\r\n    console.log(\"--called LazyState--\");\r\n\r\n    const [ count, setCount ] = useState(1);\r\n\r\n    const [ data, setData ] = useState(() => {\r\n        console.log(\"-- lazy state init\");\r\n        return [\r\n            { name: \"N1\", age: 41 },\r\n            { name: \"N2\", age: 42 },\r\n            { name: \"N3\", age: 43 },\r\n            { name: \"N4\", age: 44 }\r\n        ];\r\n    });\r\n\r\n    return (<>\r\n        <p>Konsole öffnen um Ausgabe zu sehen.</p>\r\n        <p>Zähler: {count}</p>\r\n\r\n        <input type=\"button\" onClick={() => {\r\n            setCount(prev => prev+1);\r\n            }} value=\"Count\" />\r\n        <p/>\r\n\r\n        { data && data.map(each => {\r\n            return <> <p/> <span>{each.name}</span> <span>{each.age}</span> </>;\r\n            }) \r\n        }\r\n    </>);\r\n};","import {\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport { Fragment, useState, useEffect } from 'react';\r\n\r\nexport default function UseEffectOverview() {\r\n    return (<>\r\n        <p/><Link to=\"/useEffect\">Zurück zu useEffect</Link>\r\n\r\n        <Switch>\r\n            <Route path=\"/useEffect/useeffect\" component={UseEffectLifeCycle} />\r\n            <Route path=\"/useEffect/useeffectdependencies\" component={UseEffectDependencies} />\r\n            \r\n            <Route path=\"/useEffect\" component={UseEffectOverviewLinks} />\r\n        </Switch>\r\n    </>);\r\n};\r\n\r\nfunction UseEffectOverviewLinks() {\r\n    return (<>\r\n        <div><nav>\r\n\r\n            <p/><Link to=\"/useEffect/useeffect\">useEffect Lifecycle</Link>\r\n            <p/><Link to=\"/useEffect/useeffectdependencies\">useEffect Dependencies</Link>\r\n            \r\n        </nav></div>\r\n    </>);\r\n};\r\n\r\nfunction UseEffectLifeCycle() {\r\n    console.log(\"-- UseEffectLifeCycle\");\r\n\r\n    const [ count, setCount ] = useState(0);\r\n    const [ secondCount, setSecondCount ] = useState(100);\r\n\r\n    const handleClick = () => {\r\n        console.log(\"-- UseEffectLifeCycle - handleClick\");\r\n        setCount(count + 1);\r\n    };\r\n    const handleClickSecond = () => {\r\n        console.log(\"-- UseEffectLifeCycle - handleClick-Second\");\r\n        setSecondCount(secondCount + 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(\"-- UseEffectLifeCycle - useEffect\");\r\n    });\r\n\r\n    useEffect(() => {\r\n        console.log(\"-- UseEffectLifeCycle - useEffect []\");\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log(\"-- UseEffectLifeCycle - useEffect [ count ]\");\r\n    }, [ count ]);\r\n\r\n    console.log(\"-- UseEffectLifeCycle - return\");\r\n    return (\r\n        <Fragment>\r\n            <p>Konsole öffnen um Ausgabe zu sehen.</p>\r\n\r\n            <p>Zähler: {count} - Zweiter Zähler: {secondCount}</p>\r\n            <input type=\"button\" onClick={handleClick} value=\"1 Count hochzählen\" />\r\n            <input type=\"button\" onClick={handleClickSecond} value=\"2 Keine Änderung der Abhängigkeiten\" />\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nfunction UseEffectDependencies() {\r\n    console.log(\"-- UseEffectLifeCycle\");\r\n\r\n    const [ count, setCount ] = useState(0);\r\n\r\n    const updateCount = () => {\r\n        console.log(\"-- UseEffectLifeCycle - updateCount\");\r\n        setCount(count + 1);\r\n    };\r\n    \r\n    console.log(\"-- UseEffectLifeCycle - return\");\r\n    return (\r\n        <Fragment>\r\n            <p>Konsole öffnen um Ausgabe zu sehen.</p>\r\n\r\n            <p>Zähler: {count}</p>\r\n            {/* <p>Text: {text}</p> */}\r\n            <input type=\"button\" onClick={updateCount} value=\"1 Count außen hochzählen\" />\r\n            \r\n            <UseEffectDependenciesInner id={count} />\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n\r\ninterface Props {\r\n    id: number\r\n};\r\nfunction UseEffectDependenciesInner(props: Props) {\r\n    console.log(\"-- UseEffectLifeCycle\");\r\n\r\n    const [ count, setCount ] = useState(0);\r\n    const [ text, setText ] = useState(\"\");\r\n\r\n    const updateCount = () => {\r\n        console.log(\"-- UseEffectLifeCycle - updateCount\");\r\n        setCount(count + 1);\r\n    };\r\n    \r\n    // Funktion ohne Abhängigkeiten nach außen, set* Funktionen dürfen gefahrlos verwendet werden.\r\n    const updateText = (updateText: number) => {\r\n        setText(\"\" + updateText);\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(\"-- UseEffectLifeCycle - useEffect [ count ]\");\r\n        // setText(\"\" + count);\r\n        // Funktionen können ohne Gefahr verwendent werden wenn diese keine Abhängigkeiten haben\r\n        updateText(count);\r\n\r\n    }, [count]); // Von count Abhängig\r\n\r\n    useEffect(() => {\r\n        // innere Funktion, nur innerhalb dieses useEffect verwendetbar\r\n        const myUpdateText = () => {\r\n            setText(\"\" + count);\r\n        };\r\n\r\n        console.log(\"-- UseEffectLifeCycle - useEffect [ props.id ]\");\r\n        // setText(\"\" + count);\r\n        myUpdateText();\r\n\r\n    }, [props.id]); // WARNUNG: Abhängigkeit count fehlt\r\n\r\n    console.log(\"-- UseEffectLifeCycle - return\");\r\n    return (\r\n        <Fragment>\r\n            <p>Zähler (innen): {count}</p>\r\n            <p>Text (innen): {text}</p>\r\n            <input type=\"button\" onClick={updateCount} value=\"1 Count innen hochzählen\" />\r\n            \r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { ChangeEvent, FormEvent, useState } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useHistory\r\n} from \"react-router-dom\";\r\nimport \"./Tasks.css\";\r\nimport setInputChange from \"./input-util\";\r\n\r\nconst isDebug: boolean = true;\r\n\r\ninterface Task {\r\n    id: number,\r\n    description: string,\r\n    dueDate: Date,\r\n    prio: number,\r\n    done: boolean\r\n};\r\n\r\nfunction createTask(id: number, desc: string, prio: number): Task {\r\n    console.log(\"create Task\");\r\n    return {\r\n        id: id,\r\n        description: desc,\r\n        dueDate: new Date(),\r\n        prio: prio,\r\n        done: false\r\n    };\r\n};\r\n\r\nfunction readInitialData(): Task[] {\r\n    // console.log(\"--readInitialData\");\r\n    return [\r\n        createTask(-1, \"React Kurs Erstellen\", 1),\r\n        createTask(-2, \"Kaffee trinken\", 2)\r\n    ];\r\n};\r\n\r\nexport function TasksView() {\r\n\r\n    // Datenhaltung auf der höchsten gemeinsamen Ebene\r\n    const [ data, setData ] = React.useState<Task[]>([]);\r\n    const [ nextId, setNextId ] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        setData(readInitialData());\r\n    }, []);\r\n\r\n    const saveTask = (task: Task) => {\r\n        // console.log(\"Speichern! \" + task.description);\r\n        task.id = nextId;\r\n        setNextId(nextId + 1);\r\n\r\n        setData( [...data, task] ); // Kopie Erstellen\r\n    };\r\n\r\n    const handleDelete = (task: Task) => {\r\n        setData( data.filter(eachTask => eachTask.id !== task.id) ); // alle Tasks übernehmen die nicht die übergebene Task sind (abgleich über id)\r\n    };\r\n\r\n    const handleDone = (task: Task) => {\r\n        // Kopie des arrays erstellen und die Kopie bearbeiten.\r\n        const copy = [...data];\r\n\r\n        const index = copy.findIndex(element => element.id === task.id);\r\n        copy[index].done = true;\r\n\r\n        setData(copy);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Router>    {/* Muss alle Link-Elemente und Switch-Elemente umklammern, deswegen so weit \"oben\" in der Hierarchie. */}\r\n                <Navigation />\r\n                <Content \r\n                    tableData={data} \r\n                    onSave={saveTask} \r\n                    onDelete={handleDelete}\r\n                    onDone={handleDone}\r\n                />\r\n            </Router>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nfunction Navigation() {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                ----\r\n                <Link to=\"/Tabelle\">Tabelle</Link>\r\n                ----\r\n                <Link to=\"/Neu\">Erfassung</Link>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface ContentProps {\r\n    tableData: Task[],\r\n    onSave: (task: Task) => void        // Event Handler\r\n    onDone: (task: Task) => void        // Event Handler\r\n    onDelete: (task: Task) => void      // Event Handler\r\n};\r\n\r\nfunction Content(props: ContentProps) {\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/Tabelle\">\r\n                <TasksTable \r\n                    tableData={props.tableData}\r\n                    onDelete={props.onDelete}\r\n                    onDone={props.onDone} \r\n                />\r\n            </Route>\r\n\r\n            <Route path=\"/Neu\">\r\n                <TaskCreate onSave={props.onSave} />\r\n            </Route>\r\n            \r\n            <Route path=\"/\"> {/* Default nicht vergessen, dass ist der Start-Pfad. */}\r\n                <TasksTable \r\n                    tableData={props.tableData}\r\n                    onDelete={props.onDelete}\r\n                    onDone={props.onDone} \r\n                />\r\n            </Route>\r\n        </Switch>\r\n    );\r\n};\r\n\r\ninterface TasksTableProps {\r\n    tableData: Task[],\r\n    onDone: (task: Task) => void        // Event Handler\r\n    onDelete: (task: Task) => void      // Event Handler\r\n};\r\n\r\nfunction TasksTable(props: TasksTableProps) {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Aufgaben Tabelle</h1>\r\n\r\n            <table>\r\n\r\n                <th>ID</th>\r\n                <th>Aufgabe</th>\r\n                <th>Prio</th>\r\n                <th>Ziel Datum</th>\r\n                <th>Erledig?</th>\r\n                \r\n                <th>Aktionen</th>\r\n                <th>Aktionen</th>\r\n\r\n                {props.tableData.map(eachTask => {\r\n                    return (\r\n                        <TaskRow key={eachTask.id} task={eachTask} onDeleteClick={props.onDelete} onDoneClick={props.onDone} />\r\n                    )\r\n                })}\r\n            </table>\r\n\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\ninterface TaskRowProps {\r\n    task: Task,\r\n    onDeleteClick: (task: Task) => void,\r\n    onDoneClick: (task: Task) => void,\r\n};\r\n\r\nfunction TaskRow(props: TaskRowProps) {\r\n    return (<tr>\r\n        <td>{props.task.id}</td>\r\n        <td>{props.task.description}</td>\r\n        <td>{props.task.prio}</td>\r\n        <td>{formatDateToString(props.task.dueDate)}</td> {/* HINWEIS: dueDate DARF hier NICHT als \"kind\" angegeben werden. Es muss zu string umgewandelt werden. */}\r\n        <td>{String(props.task.done)}</td>\r\n        \r\n        <td><input type=\"button\" onClick={() => props.onDeleteClick(props.task)} value=\"Löschen\" /></td>\r\n        <td><input type=\"button\" onClick={() => props.onDoneClick(props.task)} value=\"Erledigt\" /></td>\r\n    </tr>);\r\n};\r\n\r\ninterface TaskCreateProps {\r\n    onSave: (task: Task) => void    // Event Handler\r\n};\r\nfunction TaskCreate(props: TaskCreateProps) {\r\n\r\n    const history = useHistory();\r\n\r\n    const [data, setData] = useState<Task>(() => createTask(0, \"\", 3)); // Initial Wert macht sinn, sonst sind viele Attribute mit undefined belegt.\r\n\r\n    const [info, setInfo] = useState(\"Keine\");\r\n    const [hasError, setHasError] = useState(false);\r\n\r\n    const saveTask = (event: FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault(); // Sorgt dafür das das Submit die Seite nicht neu lädt.\r\n\r\n        // Speichern... // Typ von data ist \"Task | undefined\" daher muss die Absicherung hier sein. \r\n        if (data !== undefined) {\r\n            props.onSave(data);\r\n        }\r\n        // Navigieren zur Erf. Seite\r\n        history.push('/Tabelle');\r\n    };\r\n\r\n    // Genereller Handler um Änderungen zu übernehmen. \r\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setInputChange(setData, event);\r\n\r\n        // Validierung Möglichkeit 1: Synchron\r\n        // Trick um auf den aktuellen Zustand zuzugreifen:\r\n        // setData(prev => {\r\n        //     validate(prev);\r\n        //     return prev;\r\n        // });\r\n    };\r\n\r\n    // Validierung Möglichkeit 2: Asynchron\r\n    React.useEffect(() => {\r\n        validate(data);\r\n    }, [data]);\r\n\r\n    const validate = (currentData: Task) => {\r\n        let message = \"\";\r\n        if (currentData.description === \"\") {\r\n            message = message + \"Beschreibung darf nicht leer sein. \";\r\n        }\r\n        let now = new Date();\r\n        now.setHours(0,0,0,0);\r\n        if (currentData.dueDate < now) {\r\n            message = message + \"Datum darf nicht in der Vergangenheit liegen. \";\r\n        }\r\n\r\n        setInfo(message);\r\n        setHasError(message !== \"\");\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Aufgabe Erfassung</h1>\r\n            <form onSubmit={saveTask}>\r\n\r\n                <label htmlFor=\"desc\">Aufgabe</label> {/* The for attribute is called htmlFor for consistency with the DOM property API. */}\r\n                <input id=\"desc\" type=\"text\" name=\"description\" placeholder=\"Deine Aufgabe...\"\r\n                    value={data?.description}\r\n                    onChange={handleInputChange} \r\n                    />\r\n\r\n                <label htmlFor=\"prio\">Priorität</label>\r\n                <select \r\n                    id=\"prio\" \r\n                    value={data?.prio} \r\n                    onChange={e => setData({...data, prio: parseInt(e.target.value)} as Task)} // value ist immer string\r\n                    // onChange={handleInputChange} // abweichender Typ: ChangeEventHandler<HTMLSelectElement>\r\n                >\r\n                    <option value=\"1\">1 - Wichtig</option>\r\n                    <option value=\"2\">2 - Irgendwie schon wichtig</option>\r\n                    <option value=\"3\">3 - Muss nicht, kann aber</option>\r\n                </select>\r\n\r\n                <label htmlFor=\"dueDate\">Ziel-Datum</label>\r\n                <input\r\n                    name=\"dueDate\"\r\n                    type=\"date\"\r\n                    id=\"dueDate\"\r\n                    value={formatDateToString(data?.dueDate)}   // Formatierung nach string notwendig\r\n                    onChange={handleInputChange} \r\n                />\r\n\r\n                <label htmlFor=\"done\">Erledigt?</label>\r\n                <input\r\n                    name=\"done\"\r\n                    type=\"checkbox\"\r\n                    id=\"done\"\r\n                    checked={data?.done}\r\n                    onChange={handleInputChange} \r\n                />\r\n\r\n                <p />\r\n                <input type=\"submit\" value=\"Erstellen\" disabled={hasError} />\r\n\r\n                <p />\r\n                {\r\n                    /* bedingtes rendern */\r\n                    isDebug && <span>Debug: {data?.description} - {data?.prio} - {String(data?.done)} </span>\r\n                }\r\n                {/* String(data?.done) - String umwandlung muss sein, sonst erfolgt keine Ausgabe */}\r\n\r\n                {\r\n                    <>\r\n                        <p />\r\n                        <span>Info: {info}</span>\r\n                    </>\r\n                }\r\n                \r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nfunction formatDateToString(date: Date): string {\r\n\r\n    var dd = String(date.getDate()).padStart(2, '0');\r\n    var mm = String(date.getMonth() + 1).padStart(2, '0'); // January is 0!\r\n    var yyyy = date.getFullYear();\r\n    \r\n    return yyyy + '-' + mm + '-' + dd;\r\n};","import React, { ChangeEvent } from 'react';\r\n\r\n/**\r\n * Genereller onChange Handler,\r\n * es wird der neue Wert aus dem Event übernommen und im setData gesetzt.\r\n * \r\n * Funktioniert für strings, dates und check/radio-Boxen.\r\n * name Attribut des Input-Felds muss dem Attributnamen entsprechen!\r\n * \r\n * @param setData Setter dispatch Funktion aus dem React-State.\r\n * @param event Das HTML Input Event.\r\n */\r\nexport default function setInputChange<T>(\r\n    setData: (value: React.SetStateAction<T>) => void,\r\n    event: ChangeEvent<HTMLInputElement>): void {\r\n\r\n    const target = event.target;\r\n    const name = target.name;\r\n\r\n    if (target.type === 'checkbox' || target.type === 'radio') {\r\n        setData(data => { return {...data, [name]: target.checked}});    \r\n    } else \r\n    if (target.type === 'date') {\r\n        setData(data => { return {...data, [name]: new Date(target.value)}});\r\n    } else {\r\n        // string\r\n        setData(data => { return {...data, [name]: target.value}});\r\n    }\r\n};\r\n","import React, { FormEvent, useRef } from 'react';\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useHistory\n} from \"react-router-dom\";\nimport \"./Tasks.css\";\n\ninterface Task {\n    id: number,\n    description: string,\n    dueDate: Date,\n    prio: number,\n    done: boolean\n};\n\nfunction createTask(id: number, desc: string, prio: number): Task {\n    console.log(\"create Task\");\n    return {\n        id: id,\n        description: desc,\n        dueDate: new Date(),\n        prio: prio,\n        done: false\n    };\n};\n\nfunction readInitialData(): Task[] {\n    // console.log(\"--readInitialData\");\n    return [\n        createTask(-1, \"React Kurs Erstellen\", 1),\n        createTask(-2, \"Kaffee trinken\", 2)\n    ];\n};\n\nexport function TasksViewUncontrolled() {\n\n    // Datenhaltung auf der höchsten gemeinsamen Ebene\n    const [ data, setData ] = React.useState<Task[]>([]);\n    const [ nextId, setNextId ] = React.useState(0);\n\n    React.useEffect(() => {\n        setData(readInitialData());\n    }, []);\n\n    const saveTask = (task: Task) => {\n        // console.log(\"Speichern! \" + task.description);\n        task.id = nextId;\n        setNextId(nextId + 1);\n\n        setData( [...data, task] ); // Kopie Erstellen\n    };\n\n    const handleDelete = (task: Task) => {\n        setData( data.filter(eachTask => eachTask.id !== task.id) ); // alle Tasks übernehmen die nicht die übergebene Task sind (abgleich über id)\n    };\n\n    const handleDone = (task: Task) => {\n        // Kopie des arrays erstellen und die Kopie bearbeiten.\n        const copy = [...data];\n\n        const index = copy.findIndex(element => element.id === task.id);\n        copy[index].done = true;\n\n        setData(copy);\n    };\n\n    return (\n        <React.Fragment>\n            <Router>    {/* Muss alle Link-Elemente und Switch-Elemente umklammern, deswegen so weit \"oben\" in der Hierarchie. */}\n                <Navigation />\n                <Content \n                    tableData={data} \n                    onSave={saveTask} \n                    onDelete={handleDelete}\n                    onDone={handleDone}\n                />\n            </Router>\n        </React.Fragment>\n    );\n};\n\nfunction Navigation() {\n    return (\n        <div>\n            <nav>\n                ----\n                <Link to=\"/Tabelle\">Tabelle</Link>\n                ----\n                <Link to=\"/Neu\">Erfassung</Link>\n            </nav>\n        </div>\n    );\n};\n\ninterface ContentProps {\n    tableData: Task[],\n    onSave: (task: Task) => void        // Event Handler\n    onDone: (task: Task) => void        // Event Handler\n    onDelete: (task: Task) => void      // Event Handler\n};\n\nfunction Content(props: ContentProps) {\n    return (\n        <Switch>\n            <Route path=\"/Tabelle\">\n                <TasksTable \n                    tableData={props.tableData}\n                    onDelete={props.onDelete}\n                    onDone={props.onDone} \n                />\n            </Route>\n\n            <Route path=\"/Neu\">\n                <TaskCreate onSave={props.onSave} />\n            </Route>\n            \n            <Route path=\"/\"> {/* Default nicht vergessen, dass ist der Start-Pfad. */}\n                <TasksTable \n                    tableData={props.tableData}\n                    onDelete={props.onDelete}\n                    onDone={props.onDone} \n                />\n            </Route>\n        </Switch>\n    );\n};\n\ninterface TasksTableProps {\n    tableData: Task[],\n    onDone: (task: Task) => void        // Event Handler\n    onDelete: (task: Task) => void      // Event Handler\n};\n\nfunction TasksTable(props: TasksTableProps) {\n    return (\n        <React.Fragment>\n            <h1>Aufgaben Tabelle</h1>\n\n            <table>\n\n                <th>ID</th>\n                <th>Aufgabe</th>\n                <th>Prio</th>\n                <th>Ziel Datum</th>\n                <th>Erledig?</th>\n                \n                <th>Aktionen</th>\n                <th>Aktionen</th>\n\n                {props.tableData.map(eachTask => {\n                    return (\n                        <TaskRow key={eachTask.id} task={eachTask} onDeleteClick={props.onDelete} onDoneClick={props.onDone} />\n                    )\n                })}\n            </table>\n\n        </React.Fragment>\n    );\n};\n\ninterface TaskRowProps {\n    task: Task,\n    onDeleteClick: (task: Task) => void,\n    onDoneClick: (task: Task) => void,\n};\n\nfunction TaskRow(props: TaskRowProps) {\n    return (<tr>\n        <td>{props.task.id}</td>\n        <td>{props.task.description}</td>\n        <td>{props.task.prio}</td>\n        <td>{formatDateToString(props.task.dueDate)}</td> {/* HINWEIS: dueDate DARF hier NICHT als \"kind\" angegeben werden. Es muss zu string umgewandelt werden. */}\n        <td>{String(props.task.done)}</td>\n        \n        <td><input type=\"button\" onClick={() => props.onDeleteClick(props.task)} value=\"Löschen\" /></td>\n        <td><input type=\"button\" onClick={() => props.onDoneClick(props.task)} value=\"Erledigt\" /></td>\n    </tr>);\n};\n\ninterface TaskCreateProps {\n    onSave: (task: Task) => void    // Event Handler\n};\n\nfunction TaskCreate(props: TaskCreateProps) {\n\n    const history = useHistory();\n\n    // const [data, setData] = useState<Task>(() => createTask(0, \"\", 3));\n\n    const descElementRef = useRef<HTMLInputElement>(null); // Ohne das null wird ein inkompatibler Typ zurück gegeben.\n    const prioElementRef = useRef<HTMLSelectElement>(null); // Kein HTMLInputElement !\n    const dateElementRef = useRef<HTMLInputElement>(null);\n    const doneElementRef = useRef<HTMLInputElement>(null);\n\n    const saveTask = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault(); // Sorgt dafür das das Submit die Seite nicht neu lädt.\n\n        let task = createTask(0, \"\", 3);\n\n        task.description = descElementRef.current?.value || \"\";\n        task.prio = parseInt( prioElementRef.current?.value || \"3\");\n        task.dueDate = new Date(dateElementRef.current?.value || \"\");\n        task.done = doneElementRef.current?.checked || false;\n\n        props.onSave(task);\n\n        // Navigieren zur Erf. Seite\n        history.push('/Tabelle');\n    };\n\n    return (\n        <React.Fragment>\n            <h1>Aufgabe Erfassung (Uncontrolled)</h1>\n            <form onSubmit={saveTask}>\n\n                <label htmlFor=\"desc\">Aufgabe</label> {/* The for attribute is called htmlFor for consistency with the DOM property API. */}\n                <input id=\"desc\" type=\"text\" name=\"description\" placeholder=\"Deine Aufgabe...\"\n                    // value={data?.description}\n                    // onChange={handleInputChange} \n                    ref={descElementRef}\n                    />\n\n                <label htmlFor=\"prio\">Priorität</label>\n                <select \n                    id=\"prio\" \n                    // value={data?.prio} \n                    // onChange={e => setData({...data, prio: parseInt(e.target.value)} as Task)}\n                    ref={prioElementRef}\n                >\n                    <option value=\"1\">1 - Wichtig</option>\n                    <option value=\"2\">2 - Irgendwie schon wichtig</option>\n                    <option value=\"3\">3 - Muss nicht, kann aber</option>\n                </select>\n\n                <label htmlFor=\"dueDate\">Ziel-Datum</label>\n                <input\n                    name=\"dueDate\"\n                    type=\"date\"\n                    id=\"dueDate\"\n                    // value={formatDateToString(data?.dueDate)}\n                    // onChange={handleInputChange} \n                    ref={dateElementRef}\n                />\n\n                <label htmlFor=\"done\">Erledigt?</label>\n                <input\n                    name=\"done\"\n                    type=\"checkbox\"\n                    id=\"done\"\n                    // checked={data?.done}\n                    // onChange={handleInputChange} \n                    ref={doneElementRef}\n                />\n\n                <p />\n                <input type=\"submit\" value=\"Erstellen\" />\n\n                <p />\n                {\n                    /* bedingtes rendern */\n                    // isDebug && <span>Debug: {data?.description} - {data?.prio} - {String(data?.done)} </span>\n                }\n                {/* String(data?.done) - String umwandlung muss sein, sonst erfolgt keine Ausgabe */}\n\n            </form>\n        </React.Fragment>\n    );\n};\n\nfunction formatDateToString(date: Date): string {\n\n    var dd = String(date.getDate()).padStart(2, '0');\n    var mm = String(date.getMonth() + 1).padStart(2, '0'); // January is 0!\n    var yyyy = date.getFullYear();\n    \n    return yyyy + '-' + mm + '-' + dd;\n};","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\n// Import der Komponenten\r\nimport { Effect } from './demos/Effect';\r\nimport { Converter } from './demos/ExampleConverter';\r\nimport HookStateOverview from './demos/HookStateDemo';\r\nimport { EventTypedLoop2 } from './demos/State';\r\nimport UseStateOverview from './demos/UseStateDemo';\r\nimport UseEffectOverview from './demos/UseEffectDemo';\r\nimport { TasksView } from './task/TaskExample';\r\nimport { TasksViewUncontrolled } from './task/TaskExampleUncontrolled';\r\n\r\nexport default Overview;\r\n\r\nconst components = [\r\n    {decs: \"Task Verwaltung\", path:\"/task\", component: TasksView},\r\n    {decs: \"Task Verwaltung (Uncontrolled)\", path:\"/taskuncontrolled\", component: TasksViewUncontrolled},\r\n    {decs: \"Converter\", path:\"/converter\", component: Converter},\r\n    {decs: \"Event Demo\", path:\"/events\", component: EventTypedLoop2},\r\n    {decs: \"Effect Demo\", path:\"/effect\", component: Effect},\r\n    {decs: \"Hook State Demos\", path:\"/hookoverview\", component: HookStateOverview},\r\n    {decs: \"useState Demos\", path:\"/usestate\", component: UseStateOverview},\r\n    {decs: \"useEffect Demos\", path:\"/useEffect\", component: UseEffectOverview},\r\n];\r\n\r\nfunction Overview() {\r\n\r\n    return (<>\r\n        <React.Fragment>\r\n            <Router>\r\n                <p/><Link to=\"/\">Zurück zur Übersicht</Link>\r\n\r\n                <Switch>\r\n                    \r\n                    {\r\n                        components.map(eachComponent => {\r\n                            return <Route path={eachComponent.path} component={eachComponent.component} />\r\n                        })\r\n                    }\r\n\r\n                    <Route path=\"/\">\r\n                        <Links />\r\n                    </Route>\r\n\r\n                </Switch>\r\n            </Router>\r\n        </React.Fragment>\r\n    </>);\r\n};\r\n\r\nfunction Links() {\r\n    return (<>\r\n        <h1>Übersicht</h1>\r\n\r\n        <div>\r\n            <nav>\r\n\r\n                {\r\n                    components.map(eachComponent => {\r\n                        return <><p/><Link to={eachComponent.path}>{eachComponent.decs}</Link> </>\r\n                    })\r\n                }\r\n\r\n            </nav>\r\n        </div>\r\n    </>);\r\n};","import React, { useState } from \"react\";\r\n// import '../App.css';\r\n\r\n/**\r\n * Das Erste Beispiel eines einfachen Wechselkurs-Rechners.\r\n * Es werden die notwendigen Daten im lokalen State abgelegt, eine Umrechnungsfunktion bereitgestellt\r\n * und mit JSX das Aussehen der App definiert.\r\n */\r\nexport function Converter() {\r\n\r\n    const [name, setName] = useState(\"Bitcoin\");\r\n    const [exchange, setExchange] = useState(\"1.0\");\r\n    const [value, setValue] = useState(\"1.0\");\r\n    const [result, setResult] = useState(\"\");\r\n\r\n    const convert = () => {\r\n        const newValue = parseFloat(exchange) * parseFloat(value);\r\n        setResult(newValue.toString());\r\n    };\r\n    \r\n    return ( <React.Fragment>\r\n        <div className=\"Converter\">\r\n            \r\n            <label>\r\n                Crypto-Name:\r\n            </label>\r\n            <input type=\"text\" name=\"name\" value={name} onChange={e => setName(e.target.value)} />\r\n            \r\n            <label>\r\n                aktueller Wechselkurs:\r\n            </label>\r\n            <input type=\"text\" name=\"kurs\" value={exchange} onChange={e => setExchange(e.target.value)} />\r\n            \r\n            <label>\r\n                Anzahl Coins:\r\n            </label>\r\n            <input type=\"text\" name=\"name\" value={value} onChange={e => setValue(e.target.value)} />\r\n            \r\n            <button onClick={() => convert()}>\r\n                Berechnen\r\n            </button>\r\n\r\n        </div>\r\n\r\n        <p />\r\n        <label>Mit dem Wechselkurs von {exchange} sind deine {name}-Coins heute {result}€ Wert.</label>\r\n    </React.Fragment>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function Converter2() {\r\n\r\n    const [name, setName] = useState(\"Bitcoin\");\r\n    const [exchange, setExchange] = useState(\"1.0\");\r\n    const [value, setValue] = useState(\"1.0\");\r\n    const [result, setResult] = useState(\"\");\r\n\r\n    const convert = () => {\r\n        const newValue = parseFloat(exchange) * parseFloat(value);\r\n        setResult(newValue.toString());\r\n    };\r\n\r\n    const valueNameChanged = (newValue: string) => {\r\n        setName(newValue);\r\n    };\r\n    \r\n    return ( <React.Fragment>\r\n        <div className=\"Converter\">\r\n            \r\n            {/* <label>\r\n                Crypto-Name:\r\n            </label>\r\n            <input type=\"text\" name=\"name\" value={name} onChange={e => setName(e.target.value)} /> */}\r\n            <ConverterInputText text=\"Crypto-Name\" onValueChanged={valueNameChanged} currentValue={name} />\r\n            \r\n            <label>\r\n                aktueller Wechselkurs:\r\n            </label>\r\n            <input type=\"text\" name=\"kurs\" value={exchange} onChange={e => setExchange(e.target.value)} />\r\n            \r\n            <label>\r\n                Anzahl Coins:\r\n            </label>\r\n            <input type=\"text\" name=\"name\" value={value} onChange={e => setValue(e.target.value)} />\r\n            \r\n            <button onClick={() => convert()}>\r\n                Berechnen\r\n            </button>\r\n\r\n        </div>\r\n\r\n        <p />\r\n        <label>Mit dem Wechselkurs von {exchange} sind deine {name}-Coins heute {result}€ Wert.</label>\r\n    </React.Fragment>\r\n    );\r\n};\r\n\r\ninterface ConverterInputTextProps {\r\n    text: string,\r\n    onValueChanged: (newValue: string) => void,\r\n    currentValue: string\r\n}\r\nfunction ConverterInputText(props: ConverterInputTextProps) {\r\n    // const [value, setValue] = useState(\"1.0\");\r\n    return (<React.Fragment>\r\n        <label>\r\n            {props.text}:\r\n        </label>\r\n        {/* <input type=\"text\" name=\"name\" value={value} onChange={e => setValue(e.target.value)} /> */}\r\n        <input type=\"text\" name=\"name\" /*value={value}*/ value={props.currentValue} onChange={e => props.onValueChanged(e.target.value)} />\r\n    </React.Fragment>\r\n    );\r\n};","import React, { useState } from 'react';\r\n\r\nexport function StateCounter() {\r\n    // Deklariere eine neue Variable:\r\n    const [count, setCount] = useState(0);\r\n\r\n    return (\r\n      <div>\r\n        <p>Du hast mich {count} mal geklickt</p>\r\n        <button onClick={() => setCount(count + 1)}>\r\n          Click\r\n        </button>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport function StateCounterDouble() {\r\n    \r\n    const [count, setCount] = useState(0);\r\n    const [secondCount, setSecondCount] = useState(0);\r\n\r\n    return (\r\n      <div>\r\n        <p>Du hast mich {count} mal geklickt.</p>\r\n        <button onClick={() => setCount(count + 1)}>\r\n          Click\r\n        </button>\r\n\r\n        <p>Und mich {secondCount} mal geklickt!</p>\r\n        <button onClick={() => setSecondCount(secondCount + 1)}>\r\n          Click\r\n        </button>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport function EventSimple() {\r\n\r\n    const handleOk = () => {\r\n        console.log(\"ok clicked\");\r\n    };\r\n\r\n    return <button onClick={handleOk}>OK</button>;\r\n};\r\n\r\nexport function EventSimple2() {\r\n\r\n  // const handleOk = () => {\r\n  //     console.log(\"ok clicked\");\r\n  // };\r\n\r\n  return <button onClick={() => console.log(\"ok clicked\")}>OK</button>;\r\n};\r\n\r\nexport function EventSimple3() {\r\n\r\n  return (\r\n      <button \r\n          onClick={() => {\r\n              console.log(\"ok clicked\")\r\n          }}>\r\n          OK\r\n      </button>);\r\n};\r\n\r\nexport function EventExtern() {\r\n\treturn <button onClick={handleOkClick}>OK</button>;\r\n};\r\n\r\nfunction handleOkClick() {\r\n\tconsole.log(\"ok clicked\");\r\n};\r\n\r\nexport function EventTyped() {\r\n\r\n    const handleOk: React.MouseEventHandler<HTMLButtonElement> = (event) => {\r\n        console.log(\"ok clicked: \" + event.type);\r\n    };\r\n\r\n    return <button onClick={handleOk}>OK</button>;\r\n};\r\n\r\nexport function EventTyped2() {\r\n\r\n    const handleOk = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        console.log(\"ok clicked: \" + event.type);\r\n    };\r\n\r\n    return <button onClick={handleOk}>OK</button>;\r\n};\r\n\r\nexport default function EventTypedLoop() {\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, \r\n\t\t\tcount: number) => {\r\n        console.log(\"clicked: \" + count);\r\n    };\r\n\r\n    return (<>\r\n\t\t{\r\n\t\t\t[1,2,3,4,5,6].map(each => {\r\n\t\t\t\treturn <button onClick={(event) => handleClick(event, each)} >\r\n\t\t\t\t\tClick {each}\r\n\t\t\t\t</button>\r\n\t\t\t})\r\n\t\t}\r\n\t</>);\r\n};\r\n\r\nexport function EventTypedLoop2() {\r\n\r\n    const handleClick = (count: number) => {\r\n        console.log(\"clicked: \" + count);\r\n    };\r\n\r\n    return (<>\r\n      <p/>\r\n\t\t{\r\n\t\t\t[1,2,3,4,5,6].map(each => {\r\n\t\t\t\treturn <button onClick={() => handleClick(each)} >Click {each}</button>\r\n\t\t\t})\r\n\t\t}\r\n\t</>);\r\n};\r\n\r\nexport function EventTypedLoop3(props: EventProps) {\r\n    return (<>\r\n\t\t{\r\n\t\t\t[1,2,3,4,5,6].map(each => {\r\n\t\t\t\treturn (<button onClick={() => props.onClick?.(each)} >\r\n\t\t\t\t\tClick {each}\r\n\t\t\t\t\t</button>);\r\n\t\t\t})\r\n\t\t}\r\n\t</>);\r\n};\r\n\r\ninterface EventProps {\r\n\tonClick?: (count: number) => void\r\n};\r\nexport function EventTypedLoopUser(props: EventProps) {\r\n\t\r\n\treturn <EventTypedLoop3 onClick={props.onClick} />;\r\n};\r\n\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport function Effect() {\r\n    const [count, setCount] = useState(0);\r\n\r\n    // Lifecycle Funktion, wird bei jeder Änderung aufgerufen.\r\n    useEffect(() => {\r\n      // Titel ändern\r\n      document.title = `You clicked ${count} times`;  \r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <p>You clicked {count} times</p>\r\n            <button onClick={() => setCount(count + 1)}>\r\n                Click me\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport Overview from './components/Overview';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Overview />\n    </React.Fragment>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}