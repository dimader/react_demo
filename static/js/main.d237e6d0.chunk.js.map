{"version":3,"sources":["components/demos/HookStateDemo.tsx","components/demos/UseStateDemo.tsx","components/demos/UseEffectDemo.tsx","components/task/TaskExample.tsx","components/task/input-util.ts","components/task/TaskExampleUncontrolled.tsx","components/demos/MemoDemo.tsx","components/demos/UseReducer.tsx","components/demos/UseContextDemo.tsx","components/demos/RefCallbackDemo.tsx","components/demos/RoutingDemo.tsx","components/Overview.tsx","components/demos/ExampleConverter.tsx","components/demos/State.tsx","components/demos/Effect.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HookOverviewLinks","to","Counter","useState","count","setCount","type","onClick","value","CounterMultiple","CounterChooser","content","i","push","AntiCounter","AntiCounterChooser","kind","setKind","UseStateOverviewLinks","CounterPrevStateTest","console","log","prev","StateChangeTest","first","second","data","setData","newData","LazyStateTest","show","setShow","LazyState","name","age","map","each","UseEffectOverviewLinks","UseEffectLifeCycle","secondCount","setSecondCount","useEffect","UseEffectDependencies","UseEffectDependenciesInner","id","props","text","setText","createTask","desc","prio","description","dueDate","Date","done","Navigation","Content","path","element","TasksTable","tableData","onDelete","onDone","TaskCreate","onSave","Fragment","eachTask","TaskRow","task","onDeleteClick","onDoneClick","formatDateToString","String","navigate","useNavigate","info","setInfo","hasError","setHasError","handleInputChange","event","target","checked","setInputChange","React","validate","currentData","message","now","setHours","onSubmit","preventDefault","undefined","htmlFor","placeholder","onChange","e","parseInt","disabled","date","dd","getDate","padStart","mm","getMonth","getFullYear","descElementRef","useRef","prioElementRef","dateElementRef","doneElementRef","current","ref","SimpleStateBlock","MemoizedSimpleStateBlock","memo","SimpleStateDemo","memoCount","setMemoCount","style","backgroundColor","createMovieState","names","movies","movieReducer","state","action","filter","m","Error","UseReducerSimpleDemo","useReducer","dispatch","movie","setMovie","reducer","infos","copy","pop","initialState","InfoContext","createContext","InfoContextProvider","Provider","children","InfosOverview","useContext","newItem","setNewItem","InputBlock","visible","setVisible","refCallback","RefDemo","input","focus","node","RoutingDemoLinks","margin","RoutingDemoApp","Table","Detail","params","useParams","dataId","DetailQuery","useSearchParams","queryId","get","About","QueryDemo","searchParams","setSearchParams","has","set","append","mysearch","Overview","components","eachComponent","Component","Links","nextId","setNextId","index","findIndex","setName","exchange","setExchange","setValue","result","setResult","className","newValue","parseFloat","toString","convert","document","title","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d237e6d0.chunk.js","sourcesContent":["import {\r\n    Routes,\r\n    Route,\r\n    Link,\r\n    Outlet\r\n} from \"react-router-dom\";\r\nimport React, { Fragment, useState } from 'react';\r\n\r\nexport default function HookStateOverview() {\r\n    return (<>\r\n        <p/><Link to=\"\">Zurück zu Hooks</Link>\r\n\r\n        <Routes>\r\n            <Route path=\"counter\" element={<Counter />} />\r\n            <Route path=\"multicounter\" element={<CounterMultiple />} />\r\n            <Route path=\"flexcounter\" element={<CounterChooser />} />\r\n            <Route path=\"switchflexcounter\" element={<AntiCounterChooser />} />\r\n\r\n            <Route path=\"/\" element={<HookOverviewLinks />} />\r\n        </Routes>\r\n\r\n        <Outlet />\r\n    </>);\r\n};\r\n\r\nfunction HookOverviewLinks() {\r\n    return (<>\r\n        <div><nav>\r\n\r\n            <p/><Link to=\"counter\">Einfacher Zähler</Link>\r\n            <p/><Link to=\"multicounter\">Mehrere einfache Zähler</Link>\r\n            <p/><Link to=\"flexcounter\">Flexibele Anzahl Zähler</Link>\r\n            <p/><Link to=\"switchflexcounter\">Umschaltbarer Flexibeler Zähler</Link>\r\n            \r\n        </nav></div>\r\n    </>);\r\n};\r\n\r\nfunction Counter() {\r\n    const [ count, setCount ] = useState(0);\r\n    return (\r\n        <Fragment>\r\n\r\n            <p>Zähler: {count}</p>\r\n\r\n            <input type=\"button\" onClick={() => setCount(count - 1)} value=\"c--\" />\r\n            <input type=\"button\" onClick={() => setCount(count + 1)} value=\"c++\" />\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n// Mehrere Counter...\r\nfunction CounterMultiple() {\r\n    return (<>\r\n        <Counter />\r\n        <Counter />\r\n        <Counter />\r\n        <Counter />\r\n    </>);\r\n};\r\n\r\n// Flexible Anzahl an Countern...\r\nfunction CounterChooser() {\r\n    const [ count, setCount ] = useState(0);\r\n\r\n    let content = [];\r\n    for (let i=0; i < count; i++) {\r\n        content.push(<Counter />);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <p>Anzahl: {count}</p>\r\n\r\n            <input type=\"button\" onClick={() => setCount(count - 1)} value=\"Anzahl --\" />\r\n            <input type=\"button\" onClick={() => setCount(count + 1)} value=\"Anzahl ++\" />\r\n\r\n            {content}\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n// Counter mit String statt mit Number\r\nfunction AntiCounter() {\r\n    const [ count, setCount ] = useState(\"0\");\r\n    return (\r\n        <Fragment>\r\n\r\n            <p>Zähler: {count}</p>\r\n\r\n            <input type=\"button\" onClick={() => setCount(count + \"-\")} value=\"c--\" />\r\n            <input type=\"button\" onClick={() => setCount(count + \"+\")} value=\"c++\" />\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n// Umschaltbar ob Counter oder AntiCounter ausgegeben werden sollen. \r\nfunction AntiCounterChooser() {\r\n    const [ count, setCount ] = useState(0);\r\n    const [ kind, setKind ] = useState(false);\r\n\r\n    let content = [];\r\n    for (let i=0; i < count; i++) {\r\n        if (kind) {\r\n            content.push(<AntiCounter />);\r\n        } else {\r\n            content.push(<Counter />);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <p>Anzahl: {count} --- Komponenten-Art: {kind ? \"string\" : \"number\"} </p>\r\n\r\n            <input type=\"button\" onClick={() => setCount(count - 1)} value=\"c--\" />\r\n            <input type=\"button\" onClick={() => setCount(count + 1)} value=\"c++\" />\r\n\r\n            <input type=\"button\" onClick={() => setKind(!kind)} value=\"Switch\" />\r\n\r\n            {content}\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n","import {\r\n    Routes,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport { Fragment, useState } from 'react';\r\n\r\nexport default function UseStateOverview() {\r\n    return (<>\r\n        <p/><Link to=\"\">Zurück zu useState</Link>\r\n\r\n        <Routes>\r\n            <Route path=\"prevcounter\" element={<CounterPrevStateTest />} />\r\n            <Route path=\"statechange\" element={<StateChangeTest />} />\r\n            <Route path=\"lazy\" element={<LazyStateTest />} />\r\n            \r\n            <Route path=\"/\" element={<UseStateOverviewLinks />} />\r\n        </Routes>\r\n    </>);\r\n};\r\n\r\nfunction UseStateOverviewLinks() {\r\n    return (<>\r\n        <div><nav>\r\n\r\n            <p/><Link to=\"prevcounter\">Zähler mit funktionaler Aktualisierung</Link>\r\n            <p/><Link to=\"statechange\">Aktualisierung mit komplexen Daten</Link>\r\n            <p/><Link to=\"lazy\">Lazy initialisierung</Link>\r\n            \r\n        </nav></div>\r\n    </>);\r\n};\r\n\r\nfunction CounterPrevStateTest() {\r\n\r\n    console.log(\"--called--\");\r\n\r\n    const [ count, setCount ] = useState(1);\r\n    \r\n    console.log(\"--Aktueller Count: \" + count);\r\n\r\n    return (\r\n        <Fragment>\r\n            <p>Konsole öffnen um Ausgabe zu sehen.</p>\r\n\r\n            <p>Zähler: {count}</p>\r\n\r\n            <input type=\"button\" onClick={() => {\r\n                console.log(\"Event-Handler aktueller Count: \" + count);\r\n                setCount(count + 1);\r\n            }} value=\"1 setCount +1\" />\r\n\r\n            <input type=\"button\" onClick={() => setCount(prev => {\r\n                console.log(\"Event-Handler aktueller Count: \" + count);\r\n                console.log(\"Event-Handler prev count: \" + prev);\r\n                return prev + 1;\r\n                })} value=\"2 setCount prev +1\" />\r\n\r\n            <input type=\"button\" onClick={() => {\r\n                \r\n                console.log(\"Event-Handler aktueller Count: \" + count);\r\n\r\n                setCount(prev => {\r\n                    console.log(\"Event-Handler prev count: \" + prev);\r\n                    console.log(\"Event-Handler current count: \" + count);\r\n                    return prev+1;\r\n                });\r\n                setCount(prev => {\r\n                    console.log(\"Event-Handler prev count: \" + prev);\r\n                    console.log(\"Event-Handler current count: \" + count);\r\n                    return prev+1;\r\n                });\r\n\r\n            }} value=\"3 doppelter setCount prev +1\" />\r\n\r\n            <input type=\"button\" onClick={() => setCount(prev => {\r\n\r\n                console.log(\"Event-Handler aktueller Count: \" + count);\r\n                return prev;\r\n\r\n                })} value=\"4 setCount prev ohne Änderung\" />\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n\r\ninterface TestData {\r\n    first: string\r\n    second: string\r\n};\r\nfunction StateChangeTest() {\r\n\r\n    console.log(\"--called--\");\r\n\r\n    const [ data, setData ] = useState<TestData>(\r\n        {\r\n            first: \"1\",\r\n            second: \"2\"\r\n        }\r\n    );\r\n\r\n    console.log(\"--Aktueller Zustand: data.first: \" + data.first);\r\n\r\n    return (\r\n        <Fragment>\r\n             <p>Konsole öffnen um Ausgabe zu sehen.</p>\r\n\r\n            <p>Änderungen am Zustand, eine Kopie wird erzeugt.</p>\r\n            <input type=\"button\" onClick={() => {\r\n\r\n                setData( { ...data, first: data.first + \"1\"} );\r\n\r\n            }} value=\"1 - Zustand kopieren / +1\" />\r\n            \r\n\r\n            <p>Änderungen am Zustand ohne eine Kopie zu erzeugen.</p>\r\n            <input type=\"button\" onClick={() => {\r\n\r\n                // Änderungen werden nicht immer in die UI übernommen, sind aber im State korrekt gesetzt\r\n                data.first = data.first + \"2\";\r\n                setData( data );\r\n\r\n            }} value=\"2 - Zustand direkt bearbeiten / +2\" />\r\n\r\n            <input type=\"button\" onClick={() => {\r\n\r\n                // Ein re-render wird nur einmalig ausgelöst.\r\n                setData( data );\r\n\r\n            }} value=\"3 - Zustand direkt bearbeiten / ohne Änderungen\" />\r\n\r\n\r\n            <input type=\"button\" onClick={() => {\r\n                \r\n                let newData = {\r\n                    first: data.first,\r\n                    second: data.second\r\n                };\r\n                setData( newData );\r\n\r\n            }} value=\"4 - Zustand kopieren komplett ohne Änderungen\" />\r\n\r\n\r\n            <p>Funktionale Aktualisierung</p>\r\n            <input type=\"button\" onClick={() => setData(prev => {\r\n\r\n                return { ...prev };\r\n\r\n                })} value=\"5 - Funktionale Aktualisierung / Neues Objekt ohne Änderungen\" />\r\n            <input type=\"button\" onClick={() => setData(prev => {\r\n\r\n                return prev;\r\n\r\n                })} value=\"6 - Funktionale Aktualisierung / Original Objekt ohne Änderungen\" />\r\n            <input type=\"button\" onClick={() => setData(prev => {\r\n\r\n                prev.first = prev.first + \"7\";\r\n                return prev;\r\n\r\n                })} value=\"7 - Funktionale Aktualisierung / Original Objekt mit Änderung\" />\r\n\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nfunction LazyStateTest() {\r\n    console.log(\"--called LazyStateTest--\");\r\n\r\n    const [ show, setShow ] = useState(false);\r\n\r\n    return (<>\r\n        <input type=\"button\" onClick={() => {\r\n            setShow(prev => !prev);\r\n            }} value=\"Toggle\" />\r\n        <p/>\r\n\r\n        { show && <LazyState /> }\r\n        { !show && <p>Komponente ausgeblendet</p> }\r\n    </>);\r\n};\r\n\r\nfunction LazyState() {\r\n    console.log(\"--called LazyState--\");\r\n\r\n    const [ count, setCount ] = useState(1);\r\n\r\n    const [ data, setData ] = useState(() => {\r\n        console.log(\"-- lazy state init\");\r\n        return [\r\n            { name: \"N1\", age: 41 },\r\n            { name: \"N2\", age: 42 },\r\n            { name: \"N3\", age: 43 },\r\n            { name: \"N4\", age: 44 }\r\n        ];\r\n    });\r\n\r\n    return (<>\r\n        <p>Konsole öffnen um Ausgabe zu sehen.</p>\r\n        <p>Zähler: {count}</p>\r\n\r\n        <input type=\"button\" onClick={() => {\r\n            setCount(prev => prev+1);\r\n            }} value=\"Count\" />\r\n        <p/>\r\n\r\n        { data && data.map(each => {\r\n            return <> <p/> <span>{each.name}</span> <span>{each.age}</span> </>;\r\n            }) \r\n        }\r\n    </>);\r\n};","import {\r\n    Routes,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport { Fragment, useState, useEffect } from 'react';\r\n\r\nexport default function UseEffectOverview() {\r\n    return (<>\r\n        <p/><Link to=\"\">Zurück zu useEffect</Link>\r\n\r\n        <Routes>\r\n            <Route path=\"useeffect\" element={<UseEffectLifeCycle />} />\r\n            <Route path=\"useeffectdependencies\" element={<UseEffectDependencies />} />\r\n            \r\n            <Route path=\"/\" element={<UseEffectOverviewLinks />} />\r\n        </Routes>\r\n    </>);\r\n};\r\n\r\nfunction UseEffectOverviewLinks() {\r\n    return (<>\r\n        <div><nav>\r\n\r\n            <p/><Link to=\"useeffect\">useEffect Lifecycle</Link>\r\n            <p/><Link to=\"useeffectdependencies\">useEffect Dependencies</Link>\r\n            \r\n        </nav></div>\r\n    </>);\r\n};\r\n\r\nfunction UseEffectLifeCycle() {\r\n    console.log(\"-- UseEffectLifeCycle\");\r\n\r\n    const [ count, setCount ] = useState(0);\r\n    const [ secondCount, setSecondCount ] = useState(100);\r\n\r\n    const handleClick = () => {\r\n        console.log(\"-- UseEffectLifeCycle - handleClick\");\r\n        setCount(count + 1);\r\n    };\r\n    const handleClickSecond = () => {\r\n        console.log(\"-- UseEffectLifeCycle - handleClick-Second\");\r\n        setSecondCount(secondCount + 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(\"-- UseEffectLifeCycle - useEffect\");\r\n    });\r\n\r\n    useEffect(() => {\r\n        console.log(\"-- UseEffectLifeCycle - useEffect []\");\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log(\"-- UseEffectLifeCycle - useEffect [ count ]\");\r\n    }, [ count ]);\r\n\r\n    console.log(\"-- UseEffectLifeCycle - return\");\r\n    return (\r\n        <Fragment>\r\n            <p>Konsole öffnen um Ausgabe zu sehen.</p>\r\n\r\n            <p>Zähler: {count} - Zweiter Zähler: {secondCount}</p>\r\n            <input type=\"button\" onClick={handleClick} value=\"1 Count hochzählen\" />\r\n            <input type=\"button\" onClick={handleClickSecond} value=\"2 Keine Änderung der Abhängigkeiten\" />\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nfunction UseEffectDependencies() {\r\n    console.log(\"-- UseEffectLifeCycle\");\r\n\r\n    const [ count, setCount ] = useState(0);\r\n\r\n    const updateCount = () => {\r\n        console.log(\"-- UseEffectLifeCycle - updateCount\");\r\n        setCount(count + 1);\r\n    };\r\n    \r\n    console.log(\"-- UseEffectLifeCycle - return\");\r\n    return (\r\n        <Fragment>\r\n            <p>Konsole öffnen um Ausgabe zu sehen.</p>\r\n\r\n            <p>Zähler: {count}</p>\r\n            {/* <p>Text: {text}</p> */}\r\n            <input type=\"button\" onClick={updateCount} value=\"1 Count außen hochzählen\" />\r\n            \r\n            <UseEffectDependenciesInner id={count} />\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n\r\ninterface Props {\r\n    id: number\r\n};\r\nfunction UseEffectDependenciesInner(props: Props) {\r\n    console.log(\"-- UseEffectLifeCycle\");\r\n\r\n    const [ count, setCount ] = useState(0);\r\n    const [ text, setText ] = useState(\"\");\r\n\r\n    const updateCount = () => {\r\n        console.log(\"-- UseEffectLifeCycle - updateCount\");\r\n        setCount(count + 1);\r\n    };\r\n    \r\n    // Funktion ohne Abhängigkeiten nach außen, set* Funktionen dürfen gefahrlos verwendet werden.\r\n    const updateText = (updateText: number) => {\r\n        setText(\"\" + updateText);\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(\"-- UseEffectLifeCycle - useEffect [ count ]\");\r\n        // setText(\"\" + count);\r\n        // Funktionen können ohne Gefahr verwendent werden wenn diese keine Abhängigkeiten haben\r\n        updateText(count);\r\n\r\n    }, [count]); // Von count Abhängig\r\n\r\n    useEffect(() => {\r\n        // innere Funktion, nur innerhalb dieses useEffect verwendetbar\r\n        const myUpdateText = () => {\r\n            setText(\"\" + count);\r\n        };\r\n\r\n        console.log(\"-- UseEffectLifeCycle - useEffect [ props.id ]\");\r\n        // setText(\"\" + count);\r\n        myUpdateText();\r\n\r\n    }, [props.id]); // WARNUNG: Abhängigkeit count fehlt\r\n\r\n    console.log(\"-- UseEffectLifeCycle - return\");\r\n    return (\r\n        <Fragment>\r\n            <p>Zähler (innen): {count}</p>\r\n            <p>Text (innen): {text}</p>\r\n            <input type=\"button\" onClick={updateCount} value=\"1 Count innen hochzählen\" />\r\n            \r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { ChangeEvent, FormEvent, useState } from 'react';\r\nimport {\r\n    Routes,\r\n    Route,\r\n    Link,\r\n    useNavigate\r\n} from \"react-router-dom\";\r\nimport \"./Tasks.css\";\r\nimport setInputChange from \"./input-util\";\r\n\r\nconst isDebug: boolean = true;\r\n\r\ninterface Task {\r\n    id: number,\r\n    description: string,\r\n    dueDate: Date,\r\n    prio: number,\r\n    done: boolean\r\n};\r\n\r\nfunction createTask(id: number, desc: string, prio: number): Task {\r\n    console.log(\"create Task\");\r\n    return {\r\n        id: id,\r\n        description: desc,\r\n        dueDate: new Date(),\r\n        prio: prio,\r\n        done: false\r\n    };\r\n};\r\n\r\nfunction readInitialData(): Task[] {\r\n    // console.log(\"--readInitialData\");\r\n    return [\r\n        createTask(-1, \"React Kurs Erstellen\", 1),\r\n        createTask(-2, \"Kaffee trinken\", 2)\r\n    ];\r\n};\r\n\r\nexport function TasksView() {\r\n\r\n    // Datenhaltung auf der höchsten gemeinsamen Ebene\r\n    const [ data, setData ] = React.useState<Task[]>([]);\r\n    const [ nextId, setNextId ] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        setData(readInitialData());\r\n    }, []);\r\n\r\n    const saveTask = (task: Task) => {\r\n        // console.log(\"Speichern! \" + task.description);\r\n        task.id = nextId;\r\n        setNextId(nextId + 1);\r\n\r\n        setData( [...data, task] ); // Kopie Erstellen\r\n    };\r\n\r\n    const handleDelete = (task: Task) => {\r\n        setData( data.filter(eachTask => eachTask.id !== task.id) ); // alle Tasks übernehmen die nicht die übergebene Task sind (abgleich über id)\r\n    };\r\n\r\n    const handleDone = (task: Task) => {\r\n        // Kopie des arrays erstellen und die Kopie bearbeiten.\r\n        const copy = [...data];\r\n\r\n        const index = copy.findIndex(element => element.id === task.id);\r\n        copy[index].done = true;\r\n\r\n        setData(copy);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {/* <Router> // Hier wegelassen da Router bereits in Overview enthalten ist. */}\r\n            <Navigation />\r\n            <Content \r\n                tableData={data} \r\n                onSave={saveTask} \r\n                onDelete={handleDelete}\r\n                onDone={handleDone}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nfunction Navigation() {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                ----\r\n                <Link to=\"Tabelle\">Tabelle</Link>\r\n                ----\r\n                <Link to=\"Neu\">Erfassung</Link>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface ContentProps {\r\n    tableData: Task[],\r\n    onSave: (task: Task) => void        // Event Handler\r\n    onDone: (task: Task) => void        // Event Handler\r\n    onDelete: (task: Task) => void      // Event Handler\r\n};\r\n\r\nfunction Content(props: ContentProps) {\r\n    return (\r\n        <Routes>\r\n            <Route path=\"Tabelle\" element={\r\n                <TasksTable \r\n                    tableData={props.tableData}\r\n                    onDelete={props.onDelete}\r\n                    onDone={props.onDone} \r\n                />\r\n                } />\r\n\r\n            <Route path=\"Neu\" element={<TaskCreate onSave={props.onSave} />} />\r\n\r\n            <Route path=\"/\" element={ /* Default nicht vergessen, dass ist der Start-Pfad. */\r\n                <TasksTable \r\n                    tableData={props.tableData}\r\n                    onDelete={props.onDelete}\r\n                    onDone={props.onDone} \r\n                />\r\n                } />\r\n        </Routes>\r\n    );\r\n};\r\n\r\ninterface TasksTableProps {\r\n    tableData: Task[],\r\n    onDone: (task: Task) => void        // Event Handler\r\n    onDelete: (task: Task) => void      // Event Handler\r\n};\r\n\r\nfunction TasksTable(props: TasksTableProps) {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Aufgaben Tabelle</h1>\r\n\r\n            <table>\r\n\r\n                <th>ID</th>\r\n                <th>Aufgabe</th>\r\n                <th>Prio</th>\r\n                <th>Ziel Datum</th>\r\n                <th>Erledig?</th>\r\n                \r\n                <th>Aktionen</th>\r\n                <th>Aktionen</th>\r\n\r\n                {props.tableData.map(eachTask => {\r\n                    return (\r\n                        <TaskRow key={eachTask.id} task={eachTask} onDeleteClick={props.onDelete} onDoneClick={props.onDone} />\r\n                    )\r\n                })}\r\n            </table>\r\n\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\ninterface TaskRowProps {\r\n    task: Task,\r\n    onDeleteClick: (task: Task) => void,\r\n    onDoneClick: (task: Task) => void,\r\n};\r\n\r\nfunction TaskRow(props: TaskRowProps) {\r\n    return (<tr>\r\n        <td>{props.task.id}</td>\r\n        <td>{props.task.description}</td>\r\n        <td>{props.task.prio}</td>\r\n        <td>{formatDateToString(props.task.dueDate)}</td> {/* HINWEIS: dueDate DARF hier NICHT als \"kind\" angegeben werden. Es muss zu string umgewandelt werden. */}\r\n        <td>{String(props.task.done)}</td>\r\n        \r\n        <td><input type=\"button\" onClick={() => props.onDeleteClick(props.task)} value=\"Löschen\" /></td>\r\n        <td><input type=\"button\" onClick={() => props.onDoneClick(props.task)} value=\"Erledigt\" /></td>\r\n    </tr>);\r\n};\r\n\r\ninterface TaskCreateProps {\r\n    onSave: (task: Task) => void    // Event Handler\r\n};\r\nfunction TaskCreate(props: TaskCreateProps) {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [data, setData] = useState<Task>(() => createTask(0, \"\", 3)); // Initial Wert macht sinn, sonst sind viele Attribute mit undefined belegt.\r\n\r\n    const [info, setInfo] = useState(\"Keine\");\r\n    const [hasError, setHasError] = useState(false);\r\n\r\n    const saveTask = (event: FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault(); // Sorgt dafür das das Submit die Seite nicht neu lädt.\r\n\r\n        // Speichern... // Typ von data ist \"Task | undefined\" daher muss die Absicherung hier sein. \r\n        if (data !== undefined) {\r\n            props.onSave(data);\r\n        }\r\n        // Navigieren zur Erf. Seite\r\n        navigate('/task/Tabelle');\r\n    };\r\n\r\n    // Genereller Handler um Änderungen zu übernehmen. \r\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setInputChange(setData, event);\r\n\r\n        // Validierung Möglichkeit 1: Synchron\r\n        // Trick um auf den aktuellen Zustand zuzugreifen:\r\n        // setData(prev => {\r\n        //     validate(prev);\r\n        //     return prev;\r\n        // });\r\n    };\r\n\r\n    // Validierung Möglichkeit 2: Asynchron\r\n    React.useEffect(() => {\r\n        validate(data);\r\n    }, [data]);\r\n\r\n    const validate = (currentData: Task) => {\r\n        let message = \"\";\r\n        if (currentData.description === \"\") {\r\n            message = message + \"Beschreibung darf nicht leer sein. \";\r\n        }\r\n        let now = new Date();\r\n        now.setHours(0,0,0,0);\r\n        if (currentData.dueDate < now) {\r\n            message = message + \"Datum darf nicht in der Vergangenheit liegen. \";\r\n        }\r\n\r\n        setInfo(message);\r\n        setHasError(message !== \"\");\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Aufgabe Erfassung</h1>\r\n            <form onSubmit={saveTask}>\r\n\r\n                <label htmlFor=\"desc\">Aufgabe</label> {/* The for attribute is called htmlFor for consistency with the DOM property API. */}\r\n                <input id=\"desc\" type=\"text\" name=\"description\" placeholder=\"Deine Aufgabe...\"\r\n                    value={data?.description}\r\n                    onChange={handleInputChange} \r\n                    />\r\n\r\n                <label htmlFor=\"prio\">Priorität</label>\r\n                <select \r\n                    id=\"prio\" \r\n                    value={data?.prio} \r\n                    onChange={e => setData({...data, prio: parseInt(e.target.value)} as Task)} // value ist immer string\r\n                    // onChange={handleInputChange} // abweichender Typ: ChangeEventHandler<HTMLSelectElement>\r\n                >\r\n                    <option value=\"1\">1 - Wichtig</option>\r\n                    <option value=\"2\">2 - Irgendwie schon wichtig</option>\r\n                    <option value=\"3\">3 - Muss nicht, kann aber</option>\r\n                </select>\r\n\r\n                <label htmlFor=\"dueDate\">Ziel-Datum</label>\r\n                <input\r\n                    name=\"dueDate\"\r\n                    type=\"date\"\r\n                    id=\"dueDate\"\r\n                    value={formatDateToString(data?.dueDate)}   // Formatierung nach string notwendig\r\n                    onChange={handleInputChange} \r\n                />\r\n\r\n                <label htmlFor=\"done\">Erledigt?</label>\r\n                <input\r\n                    name=\"done\"\r\n                    type=\"checkbox\"\r\n                    id=\"done\"\r\n                    checked={data?.done}\r\n                    onChange={handleInputChange} \r\n                />\r\n\r\n                <p />\r\n                <input type=\"submit\" value=\"Erstellen\" disabled={hasError} />\r\n\r\n                <p />\r\n                {\r\n                    /* bedingtes rendern */\r\n                    isDebug && <span>Debug: {data?.description} - {data?.prio} - {String(data?.done)} </span>\r\n                }\r\n                {/* String(data?.done) - String umwandlung muss sein, sonst erfolgt keine Ausgabe */}\r\n\r\n                {\r\n                    <>\r\n                        <p />\r\n                        <span>Info: {info}</span>\r\n                    </>\r\n                }\r\n                \r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nfunction formatDateToString(date: Date): string {\r\n\r\n    var dd = String(date.getDate()).padStart(2, '0');\r\n    var mm = String(date.getMonth() + 1).padStart(2, '0'); // January is 0!\r\n    var yyyy = date.getFullYear();\r\n    \r\n    return yyyy + '-' + mm + '-' + dd;\r\n};","import React, { ChangeEvent } from 'react';\r\n\r\n/**\r\n * Genereller onChange Handler,\r\n * es wird der neue Wert aus dem Event übernommen und im setData gesetzt.\r\n * \r\n * Funktioniert für strings, dates und check/radio-Boxen.\r\n * name Attribut des Input-Felds muss dem Attributnamen entsprechen!\r\n * \r\n * @param setData Setter dispatch Funktion aus dem React-State.\r\n * @param event Das HTML Input Event.\r\n */\r\nexport default function setInputChange<T>(\r\n    setData: (value: React.SetStateAction<T>) => void,\r\n    event: ChangeEvent<HTMLInputElement>): void {\r\n\r\n    const target = event.target;\r\n    const name = target.name;\r\n\r\n    if (target.type === 'checkbox' || target.type === 'radio') {\r\n        setData(data => { return {...data, [name]: target.checked}});    \r\n    } else \r\n    if (target.type === 'date') {\r\n        setData(data => { return {...data, [name]: new Date(target.value)}});\r\n    } else {\r\n        // string\r\n        setData(data => { return {...data, [name]: target.value}});\r\n    }\r\n};\r\n","import React, { FormEvent, useRef } from 'react';\nimport {\n    Routes,\n    Route,\n    Link,\n    useNavigate\n} from \"react-router-dom\";\nimport \"./Tasks.css\";\n\ninterface Task {\n    id: number,\n    description: string,\n    dueDate: Date,\n    prio: number,\n    done: boolean\n};\n\nfunction createTask(id: number, desc: string, prio: number): Task {\n    console.log(\"create Task\");\n    return {\n        id: id,\n        description: desc,\n        dueDate: new Date(),\n        prio: prio,\n        done: false\n    };\n};\n\nfunction readInitialData(): Task[] {\n    // console.log(\"--readInitialData\");\n    return [\n        createTask(-1, \"React Kurs Erstellen\", 1),\n        createTask(-2, \"Kaffee trinken\", 2)\n    ];\n};\n\nexport function TasksViewUncontrolled() {\n\n    // Datenhaltung auf der höchsten gemeinsamen Ebene\n    const [ data, setData ] = React.useState<Task[]>([]);\n    const [ nextId, setNextId ] = React.useState(0);\n\n    React.useEffect(() => {\n        setData(readInitialData());\n    }, []);\n\n    const saveTask = (task: Task) => {\n        // console.log(\"Speichern! \" + task.description);\n        task.id = nextId;\n        setNextId(nextId + 1);\n\n        setData( [...data, task] ); // Kopie Erstellen\n    };\n\n    const handleDelete = (task: Task) => {\n        setData( data.filter(eachTask => eachTask.id !== task.id) ); // alle Tasks übernehmen die nicht die übergebene Task sind (abgleich über id)\n    };\n\n    const handleDone = (task: Task) => {\n        // Kopie des arrays erstellen und die Kopie bearbeiten.\n        const copy = [...data];\n\n        const index = copy.findIndex(element => element.id === task.id);\n        copy[index].done = true;\n\n        setData(copy);\n    };\n\n    return (\n        <React.Fragment>\n            {/* <Router> // Hier wegelassen da Router bereits in Overview enthalten ist. */}\n            <Navigation />\n            <Content \n                tableData={data} \n                onSave={saveTask} \n                onDelete={handleDelete}\n                onDone={handleDone}\n            />\n        </React.Fragment>\n    );\n};\n\nfunction Navigation() {\n    return (\n        <div>\n            <nav>\n                ----\n                <Link to=\"Tabelle\">Tabelle</Link>\n                ----\n                <Link to=\"Neu\">Erfassung</Link>\n            </nav>\n        </div>\n    );\n};\n\ninterface ContentProps {\n    tableData: Task[],\n    onSave: (task: Task) => void        // Event Handler\n    onDone: (task: Task) => void        // Event Handler\n    onDelete: (task: Task) => void      // Event Handler\n};\n\nfunction Content(props: ContentProps) {\n    return (\n        <Routes>\n            <Route path=\"Tabelle\" element={\n                <TasksTable \n                    tableData={props.tableData}\n                    onDelete={props.onDelete}\n                    onDone={props.onDone} \n                />\n                }>\n            </Route>\n\n            <Route path=\"Neu\" element={<TaskCreate onSave={props.onSave} />}>\n                \n            </Route>\n            \n            <Route path=\"/\" element={ /* Default nicht vergessen, dass ist der Start-Pfad. */\n                <TasksTable \n                    tableData={props.tableData}\n                    onDelete={props.onDelete}\n                    onDone={props.onDone} \n                />\n                }>\n            </Route>\n        </Routes>\n    );\n};\n\ninterface TasksTableProps {\n    tableData: Task[],\n    onDone: (task: Task) => void        // Event Handler\n    onDelete: (task: Task) => void      // Event Handler\n};\n\nfunction TasksTable(props: TasksTableProps) {\n    return (\n        <React.Fragment>\n            <h1>Aufgaben Tabelle</h1>\n\n            <table>\n\n                <th>ID</th>\n                <th>Aufgabe</th>\n                <th>Prio</th>\n                <th>Ziel Datum</th>\n                <th>Erledig?</th>\n                \n                <th>Aktionen</th>\n                <th>Aktionen</th>\n\n                {props.tableData.map(eachTask => {\n                    return (\n                        <TaskRow key={eachTask.id} task={eachTask} onDeleteClick={props.onDelete} onDoneClick={props.onDone} />\n                    )\n                })}\n            </table>\n\n        </React.Fragment>\n    );\n};\n\ninterface TaskRowProps {\n    task: Task,\n    onDeleteClick: (task: Task) => void,\n    onDoneClick: (task: Task) => void,\n};\n\nfunction TaskRow(props: TaskRowProps) {\n    return (<tr>\n        <td>{props.task.id}</td>\n        <td>{props.task.description}</td>\n        <td>{props.task.prio}</td>\n        <td>{formatDateToString(props.task.dueDate)}</td> {/* HINWEIS: dueDate DARF hier NICHT als \"kind\" angegeben werden. Es muss zu string umgewandelt werden. */}\n        <td>{String(props.task.done)}</td>\n        \n        <td><input type=\"button\" onClick={() => props.onDeleteClick(props.task)} value=\"Löschen\" /></td>\n        <td><input type=\"button\" onClick={() => props.onDoneClick(props.task)} value=\"Erledigt\" /></td>\n    </tr>);\n};\n\ninterface TaskCreateProps {\n    onSave: (task: Task) => void    // Event Handler\n};\n\nfunction TaskCreate(props: TaskCreateProps) {\n\n    const navigate = useNavigate();\n\n    // const [data, setData] = useState<Task>(() => createTask(0, \"\", 3));\n\n    const descElementRef = useRef<HTMLInputElement>(null); // Ohne das null wird ein inkompatibler Typ zurück gegeben.\n    const prioElementRef = useRef<HTMLSelectElement>(null); // Kein HTMLInputElement !\n    const dateElementRef = useRef<HTMLInputElement>(null);\n    const doneElementRef = useRef<HTMLInputElement>(null);\n\n    const saveTask = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault(); // Sorgt dafür das das Submit die Seite nicht neu lädt.\n\n        let task = createTask(0, \"\", 3);\n\n        task.description = descElementRef.current?.value || \"\";\n        task.prio = parseInt( prioElementRef.current?.value || \"3\");\n        task.dueDate = new Date(dateElementRef.current?.value || \"\");\n        task.done = doneElementRef.current?.checked || false;\n\n        props.onSave(task);\n\n        // Navigieren zur Erf. Seite\n        navigate('/taskuncontrolled/Tabelle');\n    };\n\n    return (\n        <React.Fragment>\n            <h1>Aufgabe Erfassung (Uncontrolled)</h1>\n            <form onSubmit={saveTask}>\n\n                <label htmlFor=\"desc\">Aufgabe</label> {/* The for attribute is called htmlFor for consistency with the DOM property API. */}\n                <input id=\"desc\" type=\"text\" name=\"description\" placeholder=\"Deine Aufgabe...\"\n                    // value={data?.description}\n                    // onChange={handleInputChange} \n                    ref={descElementRef}\n                    />\n\n                <label htmlFor=\"prio\">Priorität</label>\n                <select \n                    id=\"prio\" \n                    // value={data?.prio} \n                    // onChange={e => setData({...data, prio: parseInt(e.target.value)} as Task)}\n                    ref={prioElementRef}\n                >\n                    <option value=\"1\">1 - Wichtig</option>\n                    <option value=\"2\">2 - Irgendwie schon wichtig</option>\n                    <option value=\"3\">3 - Muss nicht, kann aber</option>\n                </select>\n\n                <label htmlFor=\"dueDate\">Ziel-Datum</label>\n                <input\n                    name=\"dueDate\"\n                    type=\"date\"\n                    id=\"dueDate\"\n                    // value={formatDateToString(data?.dueDate)}\n                    // onChange={handleInputChange} \n                    ref={dateElementRef}\n                />\n\n                <label htmlFor=\"done\">Erledigt?</label>\n                <input\n                    name=\"done\"\n                    type=\"checkbox\"\n                    id=\"done\"\n                    // checked={data?.done}\n                    // onChange={handleInputChange} \n                    ref={doneElementRef}\n                />\n\n                <p />\n                <input type=\"submit\" value=\"Erstellen\" />\n\n                <p />\n                {\n                    /* bedingtes rendern */\n                    // isDebug && <span>Debug: {data?.description} - {data?.prio} - {String(data?.done)} </span>\n                }\n                {/* String(data?.done) - String umwandlung muss sein, sonst erfolgt keine Ausgabe */}\n\n            </form>\n        </React.Fragment>\n    );\n};\n\nfunction formatDateToString(date: Date): string {\n\n    var dd = String(date.getDate()).padStart(2, '0');\n    var mm = String(date.getMonth() + 1).padStart(2, '0'); // January is 0!\n    var yyyy = date.getFullYear();\n    \n    return yyyy + '-' + mm + '-' + dd;\n};","import React, { useState } from 'react';\r\n\r\nexport default function MemoOverview() {\r\n    return (<>\r\n        <SimpleStateDemo />\r\n    </>);\r\n};\r\n\r\ninterface SimpleBlockProps {\r\n    name: string\r\n};\r\nfunction SimpleStateBlock(props: SimpleBlockProps) {\r\n    console.log(\"--called SimpleStateBlock: \" + props.name);\r\n\r\n    const [ count, setCount ] = useState(1);\r\n\r\n    return (<>\r\n        \r\n        <p>SimpleBlock für {props.name}</p>\r\n        <p>Count {count}</p>\r\n\r\n        <input type=\"button\" onClick={() => {\r\n            setCount(prev => prev+1);\r\n            }} value=\"Count\" />\r\n        <p/>\r\n    </>);\r\n};\r\n\r\nconst MemoizedSimpleStateBlock = React.memo(SimpleStateBlock);\r\n\r\n// const MemoizedSimpleStateBlock = React.memo(SimpleStateBlock, areEqual);\r\n// function areEqual(\r\n//     prevProps: Readonly<SimpleBlockProps>, \r\n//     nextProps: Readonly<SimpleBlockProps>): boolean {\r\n//     // code...\r\n//     return false;\r\n// };\r\n\r\nfunction SimpleStateDemo() {\r\n    const [ count, setCount ] = useState(1);\r\n    const [ memoCount, setMemoCount ] = useState(1);\r\n\r\n    return (<>\r\n        <p>Konsolenausgabe öffnen um Effekt zu sehen.</p>\r\n        <p>Zähler: {count}</p>\r\n        <input type=\"button\" onClick={() => {\r\n            setCount(prev => prev+1);\r\n            }} value=\"Count ++\" />\r\n        <p/>\r\n        <input type=\"button\" onClick={() => {\r\n            setMemoCount(prev => prev+1);\r\n            }} value=\"Memo Count ++\" />\r\n        <p/>\r\n        <div style={{backgroundColor:\"lightgray\"}}>\r\n            <SimpleStateBlock name={`SimpleStateBlock Zähler ${memoCount}`} /></div>\r\n        <div style={{backgroundColor:\"lightblue\"}}>\r\n            <MemoizedSimpleStateBlock name={`MemoizedSimpleStateBlock Zähler ${memoCount}`} /></div>\r\n    </>);\r\n};\r\n","import { Fragment, useReducer, useState } from 'react';\r\n\r\nexport default function UseReducerOverview() {\r\n    return (<>\r\n        <UseReducerSimpleDemo />\r\n    </>);\r\n};\r\n\r\ntype MovieState = {\r\n    movies: string[]\r\n};\r\n\r\nconst initialState: MovieState = {\r\n    movies: [] as string[]\r\n};\r\n\r\nfunction createMovieState(names: string[]): MovieState {\r\n    return { movies: names };\r\n};\r\n\r\ntype MovieAction = | \r\n    { type: 'add', name: string } | \r\n    { type: 'delete', name: string } | \r\n    { type: 'deleteAll' } |\r\n    { type: 'reset' }\r\n    ;\r\n\r\nfunction movieReducer(state: MovieState, action: MovieAction): MovieState {\r\n    switch(action.type) {\r\n        case 'add':\r\n            return { ...state, movies: [...state.movies, action.name] };\r\n        case 'delete':\r\n            return { ...state, movies: [ ...state.movies.filter(m => m !== action.name) ] };\r\n        case 'deleteAll':\r\n            return { ...state, movies: [] };\r\n        case 'reset': \r\n            return createMovieState(['Snatch']);\r\n        default:\r\n            throw new Error();\r\n    }\r\n};\r\n\r\nfunction UseReducerSimpleDemo() {\r\n\r\n    // const [ state, dispatch ] = useReducer(movieReducer, initialState);\r\n    const [ state, dispatch ] = useReducer(movieReducer, ['Snatch'], createMovieState);\r\n\r\n    const [ movie, setMovie ] = useState('');\r\n    \r\n    return (\r\n        <Fragment>\r\n\r\n            <input type='text'\r\n                value={movie}\r\n                onChange={event => setMovie(event.target.value)}\r\n                />\r\n\r\n            <input type='button' \r\n                onClick={() => {\r\n                        dispatch({ type: 'add', name: movie });\r\n                        setMovie('');\r\n                    }} \r\n                value='add' />\r\n            <input type='button' \r\n                onClick={() => {\r\n                        dispatch({ type: 'deleteAll' });\r\n                    }} \r\n                value='reset' />\r\n\r\n            <div>\r\n                {state.movies.map((movie) => {\r\n                    return (\r\n                        <tr>\r\n                        <td>{movie}</td>\r\n                        <td><input type='button' value='Löschen'\r\n                            onClick={() => dispatch({ type: 'delete', name: movie })} /></td>\r\n                        </tr>\r\n                        );\r\n                })}\r\n            </div>\r\n\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useState, useReducer, useContext, ChangeEvent } from 'react';\r\n\r\n/*\r\n * Einfaches Beispiel für einen Context mit einem Reducer.\r\n */\r\n\r\ntype StateType = {\r\n    infos: string[]\r\n};\r\n\r\n/**\r\n * Discriminated union type.\r\n * https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types\r\n */\r\ntype ActionType =\r\n    | { type: \"add\", data: string }\r\n    | { type: \"pop\" }\r\n    ;\r\n\r\nfunction reducer(state: StateType, action: ActionType): StateType {\r\n    switch (action.type) {\r\n        case \"add\":\r\n            return {\r\n                ...state,\r\n                infos: [ ...state.infos, action.data ]\r\n            };\r\n        case \"pop\":\r\n            const copy = \r\n            {\r\n                ...state,\r\n                infos: [ ...state.infos ]\r\n            };\r\n            copy.infos.pop();\r\n            return copy;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialState: StateType = {\r\n    infos: []\r\n};\r\n\r\ntype InfoContextType = {\r\n    state: StateType,\r\n    dispatch: React.Dispatch<any>\r\n};\r\n\r\nexport const InfoContext = React.createContext<InfoContextType>({\r\n    state: initialState,\r\n    dispatch: () => null\r\n});\r\n\r\n// Mit Null Type\r\n// export const InfoContext = React.createContext<InfoContextType | null>(null);\r\n\r\n// Ohne Typangabe\r\n// export const InfoContext = React.createContext({\r\n//     state: initialState,\r\n//     dispatch: () => null\r\n// });\r\n\r\nconst InfoContextProvider = (props: React.PropsWithChildren<{}>) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    \r\n    return (\r\n        <InfoContext.Provider value={{state, dispatch}}>\r\n          {props.children}\r\n        </InfoContext.Provider>\r\n        );\r\n};\r\n\r\nexport default ContextDemo;\r\n\r\n/**\r\n * Demo Anwendung für Context.\r\n * @returns Anwendungsgerüst\r\n */\r\nfunction ContextDemo() {\r\n    return (<>\r\n        <InfoContextProvider>\r\n            <InfosOverview />\r\n        </InfoContextProvider>\r\n    </>);\r\n};\r\n\r\nfunction InfosOverview() {\r\n\r\n    const { state, dispatch } = useContext(InfoContext);\r\n\r\n    const [ newItem, setNewItem ] = useState(\"\");\r\n\r\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setNewItem(event.target.value);\r\n    };\r\n    const handleCreateNew = () => {\r\n        dispatch( { type: \"add\", data: newItem } );\r\n        setNewItem(\"\"); // zurücksetzen nach der Neuanlage\r\n    };\r\n    const handlePop = () => {\r\n        dispatch( { type: \"pop\" } );\r\n    };\r\n\r\n    return (<>\r\n        <p>Übersicht:</p>\r\n\r\n        <input id=\"info\" type=\"text\" name=\"info\" placeholder=\"Neuen Eintrag anlegen...\"\r\n            value={newItem}\r\n            onChange={handleInputChange}\r\n            />\r\n        <input type=\"button\" onClick={handleCreateNew} value=\"Anlegen\" />\r\n        <input type=\"button\" onClick={handlePop} value=\"Pop\" />\r\n\r\n        <p/>\r\n\r\n        { state.infos.map(each => {\r\n            return <> <p/> {each} </>;\r\n        })}\r\n\r\n    </>);\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nexport default function RefCallbackOverview() {\r\n    return (<>\r\n        <RefDemo />\r\n    </>);\r\n};\r\n\r\ninterface InputBlockProps {\r\n    refCallback: (node: HTMLInputElement) => void\r\n};\r\nfunction InputBlock(props: InputBlockProps) {\r\n    const [visible, setVisible] = useState(true);\r\n\r\n    return (<>\r\n        \r\n        <p>InputBlock</p>\r\n        <input type=\"button\" onClick={() => {\r\n            setVisible(prev => !prev);\r\n            }} value=\"Sichtbarkeit umschalten\" />\r\n        <p/>\r\n        {visible && \r\n            <input ref={props.refCallback} type=\"search\" />\r\n        }\r\n    </>);\r\n};\r\n\r\nfunction RefDemo() {\r\n    \r\n    const input = React.useRef<HTMLInputElement | null>(null);\r\n\r\n    const inputElementCallback = (node: HTMLInputElement) => {\r\n        console.log(\"inputElement changed: \" + node);\r\n        \r\n        input.current = node;\r\n        // node.getBoundingClientRect().height\r\n    };\r\n\r\n    return (<>\r\n        <p>Konsolenausgabe öffnen um Effekt zu sehen.</p>\r\n        \r\n        <input type=\"button\" onClick={() => {\r\n            input.current?.focus();\r\n            }} value=\"Fokus auf Input\" />\r\n        <p/>\r\n\r\n        <div style={{ backgroundColor: \"lightgray\" }}>\r\n            <InputBlock refCallback={inputElementCallback} />\r\n        </div>\r\n\r\n    </>);\r\n};\r\n","import {\r\n    Routes,\r\n    Route,\r\n    Link,\r\n    Outlet,\r\n    useParams,\r\n    useSearchParams\r\n} from \"react-router-dom\";\r\n\r\nexport default function RoutingDemo() {\r\n    return (<>\r\n        <RoutingDemoLinks />\r\n\r\n        <Routes>\r\n            <Route path=\"/\" element={<RoutingDemoApp />}>\r\n                <Route index element={<Table />} />\r\n                <Route path=\":dataId\" element={<Detail />} />\r\n                <Route path=\"about\" element={<About />} />\r\n                <Route path=\"data\" element={<DetailQuery />} />\r\n                <Route path=\"querydemo\" element={<QueryDemo />} />\r\n            </Route>\r\n        </Routes>\r\n    </>);\r\n};\r\n\r\nfunction RoutingDemoLinks() {\r\n    return (<>\r\n        <div style={{backgroundColor: \"#F9F9F9\", margin: \"1rem\"}}><nav>\r\n            Links:\r\n            {/* Unterscheidung zwischen to=/ und to=\"\" (Leerstring): */}\r\n            <p/><Link to=\"/\">Home</Link>\r\n            <p/><Link to=\"\">Routing Demo Tabelle</Link>\r\n            <p/><Link to=\"about\">About</Link>\r\n            <p/><Link to=\"querydemo\">Query Demo</Link>\r\n        </nav></div>\r\n    </>);\r\n};\r\n\r\nfunction RoutingDemoApp() {\r\n    return (<div style={{backgroundColor: \"#f7a5a5\", margin: \"1rem\"}}>\r\n        Routing Demo App\r\n        <p/>\r\n        <Outlet />\r\n    </div>);\r\n};\r\n\r\nfunction Table() {\r\n    return (<div style={{backgroundColor: \"#d7f69f\", margin: \"1rem\"}}>\r\n        Table\r\n        <p/>\r\n        <table>\r\n        {\r\n\t\t\t[1,2,3,4,5,6].map(each => {\r\n\t\t\t\treturn <tr>\r\n                    <td>Zeile {each}</td>\r\n                    <td><Link to={`${each}`}>Link</Link></td>\r\n                    <td><Link to={`data?id=${each}`}>Query-Link</Link></td>\r\n\t\t\t\t</tr>\r\n\t\t\t})\r\n\t\t}\r\n        </table>\r\n    </div>);\r\n};\r\n\r\nfunction Detail() {\r\n    // URL-Parameter auslesen\r\n    const params = useParams();\r\n\r\n    return (<div style={{backgroundColor: \"#b3f8ee\", margin: \"1rem\"}}>\r\n        Detail for {params.dataId}\r\n    </div>);\r\n};\r\n\r\nfunction DetailQuery() {\r\n    // Query-Parameter auslesen\r\n    const [searchParams] = useSearchParams();\r\n    const queryId = searchParams.get(\"id\");\r\n\r\n    return (<div style={{backgroundColor: \"#b3f8ee\", margin: \"1rem\"}}>\r\n        Query-Detail for {queryId}\r\n    </div>);\r\n};\r\n\r\nfunction About() {\r\n    return (<div style={{backgroundColor: \"#f1c5f9\", margin: \"1rem\"}}>\r\n        About\r\n    </div>);\r\n};\r\n\r\n/**\r\n * Demonstriert den Umgang mit setSearchParams.\r\n * @returns JSX\r\n */\r\nfunction QueryDemo() {\r\n    \r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n    return (<div>\r\n        <label htmlFor=\"filter\">Filter:</label>\r\n        <input\r\n          id=\"filter\"\r\n          type=\"text\"\r\n          value={searchParams.get(\"filter\") || \"\"}\r\n          onChange={(event) => {\r\n            const filter = event.target.value;\r\n            if (searchParams.has(\"filter\")) {\r\n                searchParams.set(\"filter\", filter);\r\n            } else {\r\n                searchParams.append(\"filter\", filter);\r\n            }\r\n            setSearchParams(searchParams);\r\n          }}\r\n        />\r\n        <label htmlFor=\"search\">Suche:</label>\r\n        <input\r\n          id=\"search\"\r\n          type=\"text\"\r\n          value={searchParams.get(\"mysearch\") || \"\"}\r\n          onChange={(event) => {\r\n            const mysearch = event.target.value;\r\n            if (searchParams.has(\"mysearch\")) {\r\n                searchParams.set(\"mysearch\", mysearch);\r\n            } else {\r\n                searchParams.append(\"mysearch\", mysearch);\r\n            }\r\n            setSearchParams(searchParams);\r\n          }}\r\n        />\r\n    </div>);\r\n};\r\n","import {\r\n    HashRouter as Router,\r\n    Routes,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\n// Import der Komponenten\r\nimport { Effect } from './demos/Effect';\r\nimport { Converter } from './demos/ExampleConverter';\r\nimport HookStateOverview from './demos/HookStateDemo';\r\nimport { EventTypedLoop2 } from './demos/State';\r\nimport UseStateOverview from './demos/UseStateDemo';\r\nimport UseEffectOverview from './demos/UseEffectDemo';\r\nimport { TasksView } from './task/TaskExample';\r\nimport { TasksViewUncontrolled } from './task/TaskExampleUncontrolled';\r\nimport MemoOverview from './demos/MemoDemo';\r\nimport UseReducerOverview from './demos/UseReducer';\r\nimport ContextDemo from './demos/UseContextDemo';\r\nimport RefCallbackOverview from './demos/RefCallbackDemo';\r\nimport RoutingDemo from \"./demos/RoutingDemo\";\r\n\r\nexport default Overview;\r\n\r\n/**\r\n * Array aller Demos.\r\n * Wichtig hier ist das das \"Component\"-Attribut Großgeschrieben ist. Damit kann es als JSX-Element\r\n * verwendet werden.\r\n */\r\nconst components = [\r\n    {desc: \"Task Verwaltung\", path:\"/task/\", Component: TasksView},\r\n    {desc: \"Task Verwaltung (Uncontrolled)\", path:\"/taskuncontrolled/\", Component: TasksViewUncontrolled},\r\n    {desc: \"Converter\", path:\"/converter/\", Component: Converter},\r\n    {desc: \"Event Demo\", path:\"/events/\", Component: EventTypedLoop2},\r\n    {desc: \"Effect Demo\", path:\"/effect/\", Component: Effect},\r\n    {desc: \"Hook State Demos\", path:\"/hookoverview/\", Component: HookStateOverview},\r\n    {desc: \"useState Demos\", path:\"/usestate/\", Component: UseStateOverview},\r\n    {desc: \"useEffect Demos\", path:\"/useEffect/\", Component: UseEffectOverview},\r\n    {desc: \"useReducer Demo\", path:\"/usereducer/\", Component: UseReducerOverview},\r\n    {desc: \"Context Demo\", path:\"/useContext/\", Component: ContextDemo},\r\n    {desc: \"Memo Demo\", path:\"/memo/\", Component: MemoOverview},\r\n    {desc: \"Ref Callback Demo\", path:\"/refcallback/\", Component: RefCallbackOverview},\r\n    {desc: \"Routing Demo\", path:\"/routing/\", Component: RoutingDemo},\r\n];\r\n\r\nfunction Overview() {\r\n\r\n    return (<>\r\n        <Router>\r\n            <p/><Link to=\"/\">Zurück zur Übersicht</Link>\r\n\r\n            <Routes>\r\n                \r\n                {\r\n                    components.map(eachComponent => {\r\n                        // Component-Attribut wird direkt als JSX-Element gesetzt.\r\n                        // Das '*' wird für die Nested-Navigation benötigt.\r\n                        return <Route path={eachComponent.path + '*'} element={<eachComponent.Component />} />\r\n                    })\r\n                }\r\n\r\n                <Route path=\"/\" element={<Links />} />\r\n\r\n            </Routes>\r\n        </Router>\r\n    </>);\r\n};\r\n\r\n/**\r\n * Auflistung der Links zu allen Demos.\r\n * @returns JSX\r\n */\r\nfunction Links() {\r\n    return (<>\r\n        <h1>Übersicht</h1>\r\n\r\n        <div>\r\n            <nav>\r\n\r\n                {\r\n                    components.map(eachComponent => {\r\n                        return <><p/><Link to={eachComponent.path}>{eachComponent.desc}</Link> </>\r\n                    })\r\n                }\r\n\r\n            </nav>\r\n        </div>\r\n    </>);\r\n};","import React, { useState } from \"react\";\r\n// import '../App.css';\r\n\r\n/**\r\n * Das Erste Beispiel eines einfachen Wechselkurs-Rechners.\r\n * Es werden die notwendigen Daten im lokalen State abgelegt, eine Umrechnungsfunktion bereitgestellt\r\n * und mit JSX das Aussehen der App definiert.\r\n */\r\nexport function Converter() {\r\n\r\n    const [name, setName] = useState(\"Bitcoin\");\r\n    const [exchange, setExchange] = useState(\"1.0\");\r\n    const [value, setValue] = useState(\"1.0\");\r\n    const [result, setResult] = useState(\"\");\r\n\r\n    const convert = () => {\r\n        const newValue = parseFloat(exchange) * parseFloat(value);\r\n        setResult(newValue.toString());\r\n    };\r\n    \r\n    return ( <React.Fragment>\r\n        <div className=\"Converter\">\r\n            \r\n            <label>\r\n                Crypto-Name:\r\n            </label>\r\n            <input type=\"text\" name=\"name\" value={name} onChange={e => setName(e.target.value)} />\r\n            \r\n            <label>\r\n                aktueller Wechselkurs:\r\n            </label>\r\n            <input type=\"text\" name=\"kurs\" value={exchange} onChange={e => setExchange(e.target.value)} />\r\n            \r\n            <label>\r\n                Anzahl Coins:\r\n            </label>\r\n            <input type=\"text\" name=\"name\" value={value} onChange={e => setValue(e.target.value)} />\r\n            \r\n            <button onClick={() => convert()}>\r\n                Berechnen\r\n            </button>\r\n\r\n        </div>\r\n\r\n        <p />\r\n        <label>Mit dem Wechselkurs von {exchange} sind deine {name}-Coins heute {result}€ Wert.</label>\r\n    </React.Fragment>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function Converter2() {\r\n\r\n    const [name, setName] = useState(\"Bitcoin\");\r\n    const [exchange, setExchange] = useState(\"1.0\");\r\n    const [value, setValue] = useState(\"1.0\");\r\n    const [result, setResult] = useState(\"\");\r\n\r\n    const convert = () => {\r\n        const newValue = parseFloat(exchange) * parseFloat(value);\r\n        setResult(newValue.toString());\r\n    };\r\n\r\n    const valueNameChanged = (newValue: string) => {\r\n        setName(newValue);\r\n    };\r\n    \r\n    return ( <React.Fragment>\r\n        <div className=\"Converter\">\r\n            \r\n            {/* <label>\r\n                Crypto-Name:\r\n            </label>\r\n            <input type=\"text\" name=\"name\" value={name} onChange={e => setName(e.target.value)} /> */}\r\n            <ConverterInputText text=\"Crypto-Name\" onValueChanged={valueNameChanged} currentValue={name} />\r\n            \r\n            <label>\r\n                aktueller Wechselkurs:\r\n            </label>\r\n            <input type=\"text\" name=\"kurs\" value={exchange} onChange={e => setExchange(e.target.value)} />\r\n            \r\n            <label>\r\n                Anzahl Coins:\r\n            </label>\r\n            <input type=\"text\" name=\"name\" value={value} onChange={e => setValue(e.target.value)} />\r\n            \r\n            <button onClick={() => convert()}>\r\n                Berechnen\r\n            </button>\r\n\r\n        </div>\r\n\r\n        <p />\r\n        <label>Mit dem Wechselkurs von {exchange} sind deine {name}-Coins heute {result}€ Wert.</label>\r\n    </React.Fragment>\r\n    );\r\n};\r\n\r\ninterface ConverterInputTextProps {\r\n    text: string,\r\n    onValueChanged: (newValue: string) => void,\r\n    currentValue: string\r\n}\r\nfunction ConverterInputText(props: ConverterInputTextProps) {\r\n    // const [value, setValue] = useState(\"1.0\");\r\n    return (<React.Fragment>\r\n        <label>\r\n            {props.text}:\r\n        </label>\r\n        {/* <input type=\"text\" name=\"name\" value={value} onChange={e => setValue(e.target.value)} /> */}\r\n        <input type=\"text\" name=\"name\" /*value={value}*/ value={props.currentValue} onChange={e => props.onValueChanged(e.target.value)} />\r\n    </React.Fragment>\r\n    );\r\n};","import React, { useState } from 'react';\r\n\r\nexport function StateCounter() {\r\n    // Deklariere eine neue Variable:\r\n    const [count, setCount] = useState(0);\r\n\r\n    return (\r\n      <div>\r\n        <p>Du hast mich {count} mal geklickt</p>\r\n        <button onClick={() => setCount(count + 1)}>\r\n          Click\r\n        </button>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport function StateCounterDouble() {\r\n    \r\n    const [count, setCount] = useState(0);\r\n    const [secondCount, setSecondCount] = useState(0);\r\n\r\n    return (\r\n      <div>\r\n        <p>Du hast mich {count} mal geklickt.</p>\r\n        <button onClick={() => setCount(count + 1)}>\r\n          Click\r\n        </button>\r\n\r\n        <p>Und mich {secondCount} mal geklickt!</p>\r\n        <button onClick={() => setSecondCount(secondCount + 1)}>\r\n          Click\r\n        </button>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport function EventSimple() {\r\n\r\n    const handleOk = () => {\r\n        console.log(\"ok clicked\");\r\n    };\r\n\r\n    return <button onClick={handleOk}>OK</button>;\r\n};\r\n\r\nexport function EventSimple2() {\r\n\r\n  // const handleOk = () => {\r\n  //     console.log(\"ok clicked\");\r\n  // };\r\n\r\n  return <button onClick={() => console.log(\"ok clicked\")}>OK</button>;\r\n};\r\n\r\nexport function EventSimple3() {\r\n\r\n  return (\r\n      <button \r\n          onClick={() => {\r\n              console.log(\"ok clicked\")\r\n          }}>\r\n          OK\r\n      </button>);\r\n};\r\n\r\nexport function EventExtern() {\r\n\treturn <button onClick={handleOkClick}>OK</button>;\r\n};\r\n\r\nfunction handleOkClick() {\r\n\tconsole.log(\"ok clicked\");\r\n};\r\n\r\nexport function EventTyped() {\r\n\r\n    const handleOk: React.MouseEventHandler<HTMLButtonElement> = (event) => {\r\n        console.log(\"ok clicked: \" + event.type);\r\n    };\r\n\r\n    return <button onClick={handleOk}>OK</button>;\r\n};\r\n\r\nexport function EventTyped2() {\r\n\r\n    const handleOk = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        console.log(\"ok clicked: \" + event.type);\r\n    };\r\n\r\n    return <button onClick={handleOk}>OK</button>;\r\n};\r\n\r\nexport default function EventTypedLoop() {\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, \r\n\t\t\tcount: number) => {\r\n        console.log(\"clicked: \" + count);\r\n    };\r\n\r\n    return (<>\r\n\t\t{\r\n\t\t\t[1,2,3,4,5,6].map(each => {\r\n\t\t\t\treturn <button onClick={(event) => handleClick(event, each)} >\r\n\t\t\t\t\tClick {each}\r\n\t\t\t\t</button>\r\n\t\t\t})\r\n\t\t}\r\n\t</>);\r\n};\r\n\r\nexport function EventTypedLoop2() {\r\n\r\n    const handleClick = (count: number) => {\r\n        console.log(\"clicked: \" + count);\r\n    };\r\n\r\n    return (<>\r\n      <p/>\r\n\t\t{\r\n\t\t\t[1,2,3,4,5,6].map(each => {\r\n\t\t\t\treturn <button onClick={() => handleClick(each)} >Click {each}</button>\r\n\t\t\t})\r\n\t\t}\r\n\t</>);\r\n};\r\n\r\nexport function EventTypedLoop3(props: EventProps) {\r\n    return (<>\r\n\t\t{\r\n\t\t\t[1,2,3,4,5,6].map(each => {\r\n\t\t\t\treturn (<button onClick={() => props.onClick?.(each)} >\r\n\t\t\t\t\tClick {each}\r\n\t\t\t\t\t</button>);\r\n\t\t\t})\r\n\t\t}\r\n\t</>);\r\n};\r\n\r\ninterface EventProps {\r\n\tonClick?: (count: number) => void\r\n};\r\nexport function EventTypedLoopUser(props: EventProps) {\r\n\t\r\n\treturn <EventTypedLoop3 onClick={props.onClick} />;\r\n};\r\n\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport function Effect() {\r\n    const [count, setCount] = useState(0);\r\n\r\n    // Lifecycle Funktion, wird bei jeder Änderung aufgerufen.\r\n    useEffect(() => {\r\n      // Titel ändern\r\n      document.title = `You clicked ${count} times`;  \r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <p>You clicked {count} times</p>\r\n            <button onClick={() => setCount(count + 1)}>\r\n                Click me\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport Overview from './components/Overview';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Overview />\n    </React.Fragment>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}